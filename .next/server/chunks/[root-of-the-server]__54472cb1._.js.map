{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/init-database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\n\nconst dbPath = path.join(process.cwd(), 'main.db');\nconst db = new Database(dbPath, { verbose: console.log });\n\n// Создание таблиц (если ещё не созданы)\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tg_id INTEGER NOT NULL UNIQUE,\n    username TEXT,\n    first_name TEXT NOT NULL,\n    last_name TEXT,\n    referred_by_id INTEGER,\n    balance_crystals INTEGER NOT NULL DEFAULT 400,\n    last_tap_date TEXT,\n    daily_taps_count INTEGER NOT NULL DEFAULT 0,\n    bio TEXT,\n    awards TEXT,\n    cases_to_open INTEGER NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_login_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    subscribed_to_channel INTEGER DEFAULT 0,\n    boost_count_before INTEGER DEFAULT 0\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Lots (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    photoUrl TEXT,\n    city TEXT,\n    age INTEGER,\n    start_price INTEGER NOT NULL DEFAULT 0,\n    min_bid_step INTEGER NOT NULL DEFAULT 100,\n    current_price INTEGER NOT NULL DEFAULT 0,\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('DRAFT', 'ACTIVE', 'FINISHED', 'CANCELLED')),\n    expires_at TEXT NOT NULL,\n    winner_id INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (winner_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Bids (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    lot_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    amount INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (lot_id) REFERENCES Lots(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS case_winnings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    prize_name TEXT NOT NULL,\n    won_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY,\n    task_key TEXT NOT NULL UNIQUE,\n    title TEXT NOT NULL,\n    reward_crystals INTEGER DEFAULT 0\n  )\n`);\n\n// Вставка задач (если ещё не вставлены)\nconst insertTask = db.prepare(`\n  INSERT OR IGNORE INTO tasks (id, task_key, title, reward_crystals)\n  VALUES (@id, @task_key, @title, @reward_crystals)\n`);\n\ndb.transaction(() => {\n  insertTask.run({ id: 1, task_key: 'subscribe_channel', title: 'Подпишись на Ассист+', reward_crystals: 100 });\n  insertTask.run({ id: 2, task_key: 'vote_poll', title: 'Отдай голос на улучшение канала', reward_crystals: 500 });\n  insertTask.run({ id: 3, task_key: 'invite_friend', title: 'Пригласи друга', reward_crystals: 500 });\n})();\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS user_tasks (\n    user_id INTEGER NOT NULL,\n    task_id INTEGER NOT NULL,\n    status TEXT NOT NULL DEFAULT 'completed',\n    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, task_id),\n    FOREIGN KEY(user_id) REFERENCES users(id),\n    FOREIGN KEY(task_id) REFERENCES tasks(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS referral_rewards (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    referred_user_id INTEGER NOT NULL,\n    rewarded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(user_id, referred_user_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (referred_user_id) REFERENCES users(id)\n  )\n`);\n\nconsole.log('✅ Все таблицы базы данных успешно инициализированы');\n\nexport default db;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACxC,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;IAAE,SAAS,QAAQ,GAAG;AAAC;AAEvD,wCAAwC;AACxC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;AAmBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;AAQT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;AAOT,CAAC;AAED,wCAAwC;AACxC,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC;;;AAG/B,CAAC;AAED,GAAG,WAAW,CAAC;IACb,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAqB,OAAO;QAAwB,iBAAiB;IAAI;IAC3G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAa,OAAO;QAAmC,iBAAiB;IAAI;IAC9G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAiB,OAAO;QAAkB,iBAAiB;IAAI;AACnG;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,QAAQ,GAAG,CAAC;uCAEG","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/telegram-auth.ts"],"sourcesContent":["import { createHmac } from 'crypto';\nimport { URLSearchParams } from 'url';\n\nexport function validateTelegramHash(initData: string, botToken: string): boolean {\n  try {\n    const params = new URLSearchParams(initData);\n    const hash = params.get('hash');\n    if (!hash) return false;\n    \n    params.delete('hash');\n    const dataCheckArr: string[] = [];\n    const sortedKeys = Array.from(params.keys()).sort();\n    \n    sortedKeys.forEach(key => dataCheckArr.push(`${key}=${params.get(key)}`));\n    const dataCheckString = dataCheckArr.join('\\n');\n    \n    const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest();\n    const ownHash = createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n    \n    return ownHash === hash;\n  } catch (error) {\n    console.error(\"Error during hash validation:\", error);\n    return false;\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,qBAAqB,QAAgB,EAAE,QAAgB;IACrE,IAAI;QACF,MAAM,SAAS,IAAI,+FAAA,CAAA,kBAAe,CAAC;QACnC,MAAM,OAAO,OAAO,GAAG,CAAC;QACxB,IAAI,CAAC,MAAM,OAAO;QAElB,OAAO,MAAM,CAAC;QACd,MAAM,eAAyB,EAAE;QACjC,MAAM,aAAa,MAAM,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI;QAEjD,WAAW,OAAO,CAAC,CAAA,MAAO,aAAa,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,OAAO,GAAG,CAAC,MAAM;QACvE,MAAM,kBAAkB,aAAa,IAAI,CAAC;QAE1C,MAAM,YAAY,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,cAAc,MAAM,CAAC,UAAU,MAAM;QAC5E,MAAM,UAAU,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,WAAW,MAAM,CAAC,iBAAiB,MAAM,CAAC;QAE/E,OAAO,YAAY;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/save-boost-count/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextRequest, NextResponse } from 'next/server';\nimport db from '@/lib/init-database';\nimport { validateTelegramHash } from '@/lib/telegram-auth';\n\nconst BOT_TOKEN = process.env.BOT_TOKEN;\nconst CHANNEL_ID = '-1002782276287';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { initData } = await req.json();\n\n    if (!initData) {\n      return NextResponse.json({ error: 'initData is required' }, { status: 400 });\n    }\n\n    const botToken = process.env.BOT_TOKEN;\n    if (!botToken) {\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n\n    if (!validateTelegramHash(initData, botToken)) {\n      return NextResponse.json({ error: 'Invalid Telegram hash' }, { status: 403 });\n    }\n\n    const params = new URLSearchParams(initData);\n    const userData = JSON.parse(params.get('user') || '{}');\n\n    if (!userData.id) {\n      return NextResponse.json({ error: 'Invalid user data' }, { status: 400 });\n    }\n\n    // Получаем текущее количество бустов\n    const boostCount = await getChannelBoostCount();\n\n    if (boostCount === null) {\n      return NextResponse.json({ \n        success: false, \n        message: 'Не удалось получить информацию о канале' \n      });\n    }\n\n    // Сохраняем количество бустов для пользователя\n    const updateStmt = db.prepare(\n      'UPDATE users SET boost_count_before = ? WHERE tg_id = ?'\n    );\n    updateStmt.run(boostCount, userData.id);\n\n    return NextResponse.json({\n      success: true,\n      boostCount: boostCount\n    });\n\n  } catch (error) {\n    console.error('Save boost count error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nasync function getChannelBoostCount(): Promise<number | null> {\n  if (!BOT_TOKEN || !CHANNEL_ID) {\n    throw new Error('Bot token or channel ID not configured');\n  }\n\n  try {\n    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getChat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        chat_id: CHANNEL_ID\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('Telegram API error:', errorData);\n      return null;\n    }\n\n    const data = await response.json();\n    return data.result?.boost_count || 0;\n  } catch (error) {\n    console.error('Error getting boost count:', error);\n    return null;\n  }\n}"],"names":[],"mappings":"AAAA,qDAAqD;;;AACrD;AACA;AACA;;;;AAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,SAAS;AACvC,MAAM,aAAa;AAEZ,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,MAAM,WAAW,QAAQ,GAAG,CAAC,SAAS;QACtC,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,uBAAoB,AAAD,EAAE,UAAU,WAAW;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,MAAM,SAAS,IAAI,gBAAgB;QACnC,MAAM,WAAW,KAAK,KAAK,CAAC,OAAO,GAAG,CAAC,WAAW;QAElD,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,qCAAqC;QACrC,MAAM,aAAa,MAAM;QAEzB,IAAI,eAAe,MAAM;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;YACX;QACF;QAEA,+CAA+C;QAC/C,MAAM,aAAa,gIAAA,CAAA,UAAE,CAAC,OAAO,CAC3B;QAEF,WAAW,GAAG,CAAC,YAAY,SAAS,EAAE;QAEtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,YAAY;QACd;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA,eAAe;IACb,IAAI,CAAC,aAAa,CAAC,YAAY;QAC7B,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,4BAA4B,EAAE,UAAU,QAAQ,CAAC,EAAE;YAC/E,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,SAAS;YACX;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,uBAAuB;YACrC,OAAO;QACT;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,KAAK,MAAM,EAAE,eAAe;IACrC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;IACT;AACF","debugId":null}}]
}