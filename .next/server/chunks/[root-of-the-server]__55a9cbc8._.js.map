{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/lots/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport Database from 'better-sqlite3';\n\nconst db = new Database('./main.db', { verbose: console.log });\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Lots (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    photoUrl TEXT,\n    city TEXT,\n    age INTEGER,\n    start_price INTEGER NOT NULL DEFAULT 0,\n    min_bid_step INTEGER NOT NULL DEFAULT 100,\n    current_price INTEGER NOT NULL DEFAULT 0,\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('DRAFT', 'ACTIVE', 'FINISHED', 'CANCELLED')),\n    expires_at TEXT NOT NULL,\n    winner_id INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (winner_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Bids (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    lot_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    amount INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (lot_id) REFERENCES Lots(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\nexport async function GET() {\n  console.log(`\\n\\n--- [${new Date().toISOString()}] Received /api/lots GET request ---`);\n  try {\n    const stmt = db.prepare(`\n      SELECT \n        l.*, \n        u.first_name as winner_first_name,\n        u.last_name as winner_last_name\n      FROM Lots l\n      LEFT JOIN users u ON l.winner_id = u.id\n      WHERE l.status = 'ACTIVE'\n      ORDER BY l.expires_at ASC\n    `);\n    const lots = stmt.all();\n    console.log(`[SUCCESS] Found and returning ${lots.length} lots.`);\n    return NextResponse.json(lots);\n  } catch (error) {\n    console.error('--- [FATAL ERROR] API /api/lots crashed: ---', error);\n    return NextResponse.json({ error: 'Ошибка сервера при загрузке лотов' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,aAAa;IAAE,SAAS,QAAQ,GAAG;AAAC;AAE5D,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAEM,eAAe;IACpB,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,OAAO,WAAW,GAAG,oCAAoC,CAAC;IACtF,IAAI;QACF,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC;;;;;;;;;IASzB,CAAC;QACD,MAAM,OAAO,KAAK,GAAG;QACrB,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,KAAK,MAAM,CAAC,MAAM,CAAC;QAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gDAAgD;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoC,GAAG;YAAE,QAAQ;QAAI;IACzF;AACF","debugId":null}}]
}