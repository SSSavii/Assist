{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/init-database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\n\nconst dbPath = path.join(process.cwd(), 'main.db');\nconst db = new Database(dbPath, { verbose: console.log });\n\n// Создание всех таблиц\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tg_id INTEGER NOT NULL UNIQUE,\n    username TEXT,\n    first_name TEXT NOT NULL,\n    last_name TEXT,\n    referred_by_id INTEGER,\n    balance_crystals INTEGER NOT NULL DEFAULT 400,\n    last_tap_date TEXT,\n    daily_taps_count INTEGER NOT NULL DEFAULT 0,\n    bio TEXT,\n    awards TEXT,\n    cases_to_open INTEGER NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_login_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (referred_by_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Lots (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    photoUrl TEXT,\n    city TEXT,\n    age INTEGER,\n    start_price INTEGER NOT NULL DEFAULT 0,\n    min_bid_step INTEGER NOT NULL DEFAULT 100,\n    current_price INTEGER NOT NULL DEFAULT 0,\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('DRAFT', 'ACTIVE', 'FINISHED', 'CANCELLED')),\n    expires_at TEXT NOT NULL,\n    winner_id INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (winner_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Bids (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    lot_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    amount INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (lot_id) REFERENCES Lots(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\n// Остальные таблицы из /api/auth\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS case_winnings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    prize_name TEXT NOT NULL,\n    won_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY,\n    task_key TEXT NOT NULL UNIQUE,\n    title TEXT NOT NULL,\n    reward_crystals INTEGER DEFAULT 0\n  )\n`);\n\n// Добавление начальных данных в tasks\nconst insertTask = db.prepare(`\n  INSERT OR IGNORE INTO tasks (id, task_key, title, reward_crystals)\n  VALUES (@id, @task_key, @title, @reward_crystals)\n`);\n\ndb.transaction(() => {\n  insertTask.run({ id: 1, task_key: 'subscribe_channel', title: 'Подпишись на Ассист+', reward_crystals: 100 });\n  insertTask.run({ id: 2, task_key: 'vote_poll', title: 'Отдай голос на улучшение канала', reward_crystals: 500 });\n  insertTask.run({ id: 3, task_key: 'invite_friend_assistant', title: 'Пригласи друга, который хочет стать бизнес-ассистентом', reward_crystals: 500 });\n})();\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS user_tasks (\n    user_id INTEGER NOT NULL,\n    task_id INTEGER NOT NULL,\n    status TEXT NOT NULL DEFAULT 'completed',\n    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, task_id),\n    FOREIGN KEY(user_id) REFERENCES users(id),\n    FOREIGN KEY(task_id) REFERENCES tasks(id)\n  )\n`);\n\nconsole.log('✅ Все таблицы базы данных успешно инициализированы');\n\nexport default db;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACxC,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;IAAE,SAAS,QAAQ,GAAG;AAAC;AAEvD,uBAAuB;AACvB,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,iCAAiC;AACjC,GAAG,IAAI,CAAC,CAAC;;;;;;;;AAQT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;AAOT,CAAC;AAED,sCAAsC;AACtC,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC;;;AAG/B,CAAC;AAED,GAAG,WAAW,CAAC;IACb,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAqB,OAAO;QAAwB,iBAAiB;IAAI;IAC3G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAa,OAAO;QAAmC,iBAAiB;IAAI;IAC9G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAA2B,OAAO;QAA0D,iBAAiB;IAAI;AACrJ;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,QAAQ,GAAG,CAAC;uCAEG","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/lots/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { NextResponse } from 'next/server';\nimport db from '@/lib/init-database';\n\n// Функция для исправления проблем с кодировкой\nfunction fixEncoding(str: string | null): string {\n  if (!str) return '';\n  \n  // Если строка выглядит как неправильно закодированная кириллица (Windows-1251 → UTF-8)\n  if (str.includes('Р') && str.includes('С') && str.includes('Р')) {\n    try {\n      return Buffer.from(str, 'binary').toString('utf8');\n    } catch (e) {\n      console.warn('Failed to fix encoding for string:', str);\n      return str;\n    }\n  }\n  \n  return str;\n}\n\n// Функция для обработки всего объекта лота\nfunction fixLotEncoding(lot: any): any {\n  return {\n    ...lot,\n    title: fixEncoding(lot.title),\n    description: fixEncoding(lot.description),\n    city: fixEncoding(lot.city),\n    // Остальные поля остаются без изменений\n  };\n}\n\nexport async function GET() {\n  console.log(`\\n\\n--- [${new Date().toISOString()}] Received /api/lots GET request ---`);\n  try {\n    const stmt = db.prepare(`\n      SELECT \n        l.*, \n        u.first_name as winner_first_name,\n        u.last_name as winner_last_name\n      FROM Lots l\n      LEFT JOIN users u ON l.winner_id = u.id\n      WHERE l.status = 'ACTIVE'\n      ORDER BY l.expires_at ASC\n    `);\n    const lots = stmt.all();\n    console.log(`[SUCCESS] Found ${lots.length} lots.`);\n    \n    // Исправляем кодировку для всех лотов\n    const fixedLots = lots.map(fixLotEncoding);\n    \n    console.log(`[SUCCESS] Returning ${fixedLots.length} lots with fixed encoding.`);\n    return NextResponse.json(fixedLots);\n  } catch (error) {\n    console.error('--- [FATAL ERROR] API /api/lots crashed: ---', error);\n    return NextResponse.json({ error: 'Ошибка сервера при загрузке лотов' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"AAAA,qDAAqD,GACrD,oDAAoD;;;AACpD;AACA;;;AAEA,+CAA+C;AAC/C,SAAS,YAAY,GAAkB;IACrC,IAAI,CAAC,KAAK,OAAO;IAEjB,uFAAuF;IACvF,IAAI,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM;QAC/D,IAAI;YACF,OAAO,OAAO,IAAI,CAAC,KAAK,UAAU,QAAQ,CAAC;QAC7C,EAAE,OAAO,GAAG;YACV,QAAQ,IAAI,CAAC,sCAAsC;YACnD,OAAO;QACT;IACF;IAEA,OAAO;AACT;AAEA,2CAA2C;AAC3C,SAAS,eAAe,GAAQ;IAC9B,OAAO;QACL,GAAG,GAAG;QACN,OAAO,YAAY,IAAI,KAAK;QAC5B,aAAa,YAAY,IAAI,WAAW;QACxC,MAAM,YAAY,IAAI,IAAI;IAE5B;AACF;AAEO,eAAe;IACpB,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,OAAO,WAAW,GAAG,oCAAoC,CAAC;IACtF,IAAI;QACF,MAAM,OAAO,gIAAA,CAAA,UAAE,CAAC,OAAO,CAAC,CAAC;;;;;;;;;IASzB,CAAC;QACD,MAAM,OAAO,KAAK,GAAG;QACrB,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,KAAK,MAAM,CAAC,MAAM,CAAC;QAElD,sCAAsC;QACtC,MAAM,YAAY,KAAK,GAAG,CAAC;QAE3B,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,UAAU,MAAM,CAAC,0BAA0B,CAAC;QAC/E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gDAAgD;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoC,GAAG;YAAE,QAAQ;QAAI;IACzF;AACF","debugId":null}}]
}