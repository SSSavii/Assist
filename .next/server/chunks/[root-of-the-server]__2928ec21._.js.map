{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/init-database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\n\nconst dbPath = path.join(process.cwd(), 'main.db');\nconst db = new Database(dbPath, { verbose: console.log });\n\n// Создание таблиц (если ещё не созданы)\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tg_id INTEGER NOT NULL UNIQUE,\n    username TEXT,\n    first_name TEXT NOT NULL,\n    last_name TEXT,\n    referred_by_id INTEGER,\n    balance_crystals INTEGER NOT NULL DEFAULT 400,\n    last_tap_date TEXT,\n    daily_taps_count INTEGER NOT NULL DEFAULT 0,\n    bio TEXT,\n    awards TEXT,\n    cases_to_open INTEGER NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_login_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    subscribed_to_channel INTEGER DEFAULT 0,\n    boost_count_before INTEGER DEFAULT 0\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Lots (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    photoUrl TEXT,\n    city TEXT,\n    age INTEGER,\n    start_price INTEGER NOT NULL DEFAULT 0,\n    min_bid_step INTEGER NOT NULL DEFAULT 100,\n    current_price INTEGER NOT NULL DEFAULT 0,\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('DRAFT', 'ACTIVE', 'FINISHED', 'CANCELLED')),\n    expires_at TEXT NOT NULL,\n    winner_id INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (winner_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Bids (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    lot_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    amount INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (lot_id) REFERENCES Lots(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS case_winnings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    prize_name TEXT NOT NULL,\n    won_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY,\n    task_key TEXT NOT NULL UNIQUE,\n    title TEXT NOT NULL,\n    reward_crystals INTEGER DEFAULT 0\n  )\n`);\n\n// Вставка задач (если ещё не вставлены)\nconst insertTask = db.prepare(`\n  INSERT OR IGNORE INTO tasks (id, task_key, title, reward_crystals)\n  VALUES (@id, @task_key, @title, @reward_crystals)\n`);\n\ndb.transaction(() => {\n  insertTask.run({ id: 1, task_key: 'subscribe_channel', title: 'Подпишись на Ассист+', reward_crystals: 100 });\n  insertTask.run({ id: 2, task_key: 'vote_poll', title: 'Отдай голос на улучшение канала', reward_crystals: 500 });\n  insertTask.run({ id: 3, task_key: 'invite_friend', title: 'Пригласи друга', reward_crystals: 500 });\n})();\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS user_tasks (\n    user_id INTEGER NOT NULL,\n    task_id INTEGER NOT NULL,\n    status TEXT NOT NULL DEFAULT 'completed',\n    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, task_id),\n    FOREIGN KEY(user_id) REFERENCES users(id),\n    FOREIGN KEY(task_id) REFERENCES tasks(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS referral_rewards (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    referred_user_id INTEGER NOT NULL,\n    rewarded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(user_id, referred_user_id),\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (referred_user_id) REFERENCES users(id)\n  )\n`);\n\nconsole.log('✅ Все таблицы базы данных успешно инициализированы');\n\nexport default db;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACxC,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;IAAE,SAAS,QAAQ,GAAG;AAAC;AAEvD,wCAAwC;AACxC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;AAmBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;AAQT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;AAOT,CAAC;AAED,wCAAwC;AACxC,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC;;;AAG/B,CAAC;AAED,GAAG,WAAW,CAAC;IACb,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAqB,OAAO;QAAwB,iBAAiB;IAAI;IAC3G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAa,OAAO;QAAmC,iBAAiB;IAAI;IAC9G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAiB,OAAO;QAAkB,iBAAiB;IAAI;AACnG;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,QAAQ,GAAG,CAAC;uCAEG","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/telegram-auth.ts"],"sourcesContent":["import { createHmac } from 'crypto';\nimport { URLSearchParams } from 'url';\n\nexport function validateTelegramHash(initData: string, botToken: string): boolean {\n  try {\n    const params = new URLSearchParams(initData);\n    const hash = params.get('hash');\n    if (!hash) return false;\n    \n    params.delete('hash');\n    const dataCheckArr: string[] = [];\n    const sortedKeys = Array.from(params.keys()).sort();\n    \n    sortedKeys.forEach(key => dataCheckArr.push(`${key}=${params.get(key)}`));\n    const dataCheckString = dataCheckArr.join('\\n');\n    \n    const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest();\n    const ownHash = createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n    \n    return ownHash === hash;\n  } catch (error) {\n    console.error(\"Error during hash validation:\", error);\n    return false;\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,qBAAqB,QAAgB,EAAE,QAAgB;IACrE,IAAI;QACF,MAAM,SAAS,IAAI,+FAAA,CAAA,kBAAe,CAAC;QACnC,MAAM,OAAO,OAAO,GAAG,CAAC;QACxB,IAAI,CAAC,MAAM,OAAO;QAElB,OAAO,MAAM,CAAC;QACd,MAAM,eAAyB,EAAE;QACjC,MAAM,aAAa,MAAM,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI;QAEjD,WAAW,OAAO,CAAC,CAAA,MAAO,aAAa,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,OAAO,GAAG,CAAC,MAAM;QACvE,MAAM,kBAAkB,aAAa,IAAI,CAAC;QAE1C,MAAM,YAAY,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,cAAc,MAAM,CAAC,UAAU,MAAM;QAC5E,MAAM,UAAU,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,WAAW,MAAM,CAAC,iBAAiB,MAAM,CAAC;QAE/E,OAAO,YAAY;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/auth/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { NextRequest, NextResponse } from 'next/server';\nimport db from '@/lib/init-database';\nimport { validateTelegramHash } from '@/lib/telegram-auth';\n\nconst REFERRAL_BONUS = 500;\nconst CHANNEL_ID = '-1002782276287'; // ID вашего канала\n\ninterface UserFromDB {\n  id: number;\n  tg_id: number;\n  username: string | null;\n  first_name: string;\n  last_name: string | null;\n  referred_by_id: number | null;\n  balance_crystals: number;\n  last_tap_date: string | null;\n  daily_taps_count: number;\n  cases_to_open: number;\n  created_at: string;\n  last_login_at: string;\n  subscribed_to_channel: number;\n  boost_count_before: number;\n}\n\ninterface AuthResponse {\n  id: number;\n  tg_id: number;\n  username: string | null;\n  first_name: string;\n  last_name: string | null;\n  balance_crystals: number;\n  last_tap_date: string | null;\n  daily_taps_count: number;\n  cases_to_open: number;\n  created_at: string;\n  last_login_at: string;\n  tasks_completed: {\n    subscribe: boolean;\n    vote: boolean;\n    invite: boolean;\n  };\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { initData, startapp } = await req.json();\n\n    if (!initData) {\n      return NextResponse.json({ error: 'initData is required' }, { status: 400 });\n    }\n\n    const botToken = process.env.BOT_TOKEN;\n    if (!botToken) {\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n\n    if (!validateTelegramHash(initData, botToken)) {\n      return NextResponse.json({ error: 'Invalid Telegram hash' }, { status: 403 });\n    }\n\n    const params = new URLSearchParams(initData);\n    const userData = JSON.parse(params.get('user') || '{}');\n    \n    // ВАЖНОЕ ИСПРАВЛЕНИЕ: Используем переданный startapp или извлекаем из initData\n    let startParam = startapp; // Приоритет у переданного параметра\n    \n    if (!startParam) {\n      // Пытаемся извлечь из initData разными способами\n      startParam = params.get('startapp') || params.get('start_param') || params.get('start');\n      \n      // Дополнительная попытка извлечь из объекта initDataUnsafe\n      try {\n        const initDataObj = Object.fromEntries(params.entries());\n        if (initDataObj.startapp && !startParam) {\n          startParam = initDataObj.startapp;\n        }\n        if (initDataObj.start_param && !startParam) {\n          startParam = initDataObj.start_param;\n        }\n      } catch (e) {\n        console.log('Error parsing startapp from initData:', e);\n      }\n    }\n\n    console.log('=== AUTH DEBUG ===');\n    console.log('User ID:', userData.id);\n    console.log('Start param received:', startapp);\n    console.log('Start param from initData:', startParam);\n    console.log('All initData params:', Object.fromEntries(params.entries()));\n\n    if (!userData.id) {\n      return NextResponse.json({ error: 'Invalid user data' }, { status: 400 });\n    }\n\n    // Проверяем выполненные задачи пользователя\n    const checkTasksStmt = db.prepare(`\n      SELECT t.task_key \n      FROM user_tasks ut \n      JOIN tasks t ON ut.task_id = t.id \n      WHERE ut.user_id = (SELECT id FROM users WHERE tg_id = ?)\n    `);\n\n    // Находим или создаем пользователя\n    const findUserStmt = db.prepare(`\n      SELECT * FROM users WHERE tg_id = ?\n    `);\n    \n    let user = findUserStmt.get(userData.id) as UserFromDB | undefined;\n\n    // ОБРАБОТКА РЕФЕРАЛЬНОЙ ССЫЛКИ ДАЖЕ ДЛЯ СУЩЕСТВУЮЩИХ ПОЛЬЗОВАТЕЛЕЙ\n    let referredById = null;\n    if (startParam && startParam.startsWith('ref')) {\n      const referrerIdStr = startParam.replace(/^ref_?/, '');\n      const referrerTgId = parseInt(referrerIdStr, 10);\n      \n      console.log('Referrer TG ID from param:', referrerTgId);\n      console.log('Current user TG ID:', userData.id);\n      console.log('Is self-referral:', referrerTgId === userData.id);\n      \n      if (!isNaN(referrerTgId) && referrerTgId > 0 && referrerTgId !== userData.id) {\n        const referrerStmt = db.prepare('SELECT id FROM users WHERE tg_id = ?');\n        const referrer = referrerStmt.get(referrerTgId) as { id: number } | undefined;\n        \n        console.log('Found referrer:', referrer);\n        \n        if (referrer) {\n          referredById = referrer.id;\n          \n          // Награда реферу будет начислена при проверке задания invite_friend\n          // только если приглашенный подпишется на канал\n          if (user && user.referred_by_id === null) {\n            console.log('🔗 Linking existing user to referrer:', referredById);\n          } else if (!user) {\n            console.log('🆕 New user will be created with referrer:', referredById);\n          } else {\n            console.log('ℹ️ User already has a referrer');\n          }\n        } else {\n          console.log('❌ Referrer not found in database');\n        }\n      }\n    }\n\n    if (user) {\n      // ОБНОВЛЯЕМ СУЩЕСТВУЮЩЕГО ПОЛЬЗОВАТЕЛЯ - УСТАНАВЛИВАЕМ referred_by_id ЕСЛИ НУЖНО\n      const updateStmt = db.prepare(`\n        UPDATE users \n        SET username = ?, first_name = ?, last_name = ?, \n            last_login_at = CURRENT_TIMESTAMP,\n            referred_by_id = COALESCE(referred_by_id, ?) -- Устанавливаем если еще не установлен\n        WHERE tg_id = ?\n      `);\n      updateStmt.run(\n        userData.username, \n        userData.first_name, \n        userData.last_name, \n        referredById, // Устанавливаем реферера если он есть\n        userData.id\n      );\n      user = findUserStmt.get(userData.id) as UserFromDB;\n      console.log('✅ Existing user updated, referred_by_id:', user?.referred_by_id);\n    } else {\n      // Создаем нового пользователя с рефералом\n      const insertStmt = db.prepare(`\n        INSERT INTO users (tg_id, username, first_name, last_name, referred_by_id, balance_crystals)\n        VALUES (?, ?, ?, ?, ?, 400)\n      `);\n      \n      console.log('Creating user with referred_by_id:', referredById);\n      \n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const result = insertStmt.run(\n        userData.id,\n        userData.username,\n        userData.first_name,\n        userData.last_name,\n        referredById\n      );\n\n      user = findUserStmt.get(userData.id) as UserFromDB;\n      console.log('🆕 New user created with ID:', user?.id, 'referred_by_id:', user?.referred_by_id);\n    }\n\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // ПРОВЕРКА ПОДПИСКИ НА КАНАЛ\n    try {\n      const subscriptionStatus = await checkChannelSubscription(userData.id);\n      const isSubscribed = subscriptionStatus === true;\n      \n      // Обновляем статус подписки в БД\n      const updateSubStmt = db.prepare(\n        'UPDATE users SET subscribed_to_channel = ? WHERE tg_id = ?'\n      );\n      updateSubStmt.run(isSubscribed ? 1 : 0, userData.id);\n      \n      // Обновляем объект user\n      user.subscribed_to_channel = isSubscribed ? 1 : 0;\n      \n      console.log('📢 Channel subscription status:', isSubscribed);\n    } catch (error) {\n      console.error('Subscription check error:', error);\n      // Продолжаем работу даже если проверка подписки не удалась\n    }\n\n    // Получаем выполненные задачи\n    const completedTasks = checkTasksStmt.all(user.id) as { task_key: string }[];\n    const completedTaskKeys = completedTasks.map(task => task.task_key);\n\n    const response: AuthResponse = {\n      id: user.id,\n      tg_id: user.tg_id,\n      username: user.username,\n      first_name: user.first_name,\n      last_name: user.last_name,\n      balance_crystals: user.balance_crystals,\n      last_tap_date: user.last_tap_date,\n      daily_taps_count: user.daily_taps_count,\n      cases_to_open: user.cases_to_open,\n      created_at: user.created_at,\n      last_login_at: user.last_login_at,\n      tasks_completed: {\n        subscribe: completedTaskKeys.includes('subscribe_channel'),\n        vote: completedTaskKeys.includes('vote_poll'),\n        invite: completedTaskKeys.includes('invite_friend')\n      }\n    };\n\n    console.log('=== FINAL USER DATA ===');\n    console.log('User ID:', user.id);\n    console.log('Referred by:', user.referred_by_id);\n    console.log('Balance:', user.balance_crystals);\n    console.log('Subscribed to channel:', user.subscribed_to_channel);\n    console.log('Tasks completed:', response.tasks_completed);\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('Auth error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Функция проверки подписки на канал\nasync function checkChannelSubscription(userId: number): Promise<boolean> {\n  const botToken = process.env.BOT_TOKEN;\n  \n  if (!botToken || !CHANNEL_ID) {\n    console.error('Bot token or channel ID not configured');\n    return false;\n  }\n\n  try {\n    const response = await fetch(`https://api.telegram.org/bot${botToken}/getChatMember`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        chat_id: CHANNEL_ID,\n        user_id: userId\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('Telegram API error:', errorData);\n      return false;\n    }\n\n    const data = await response.json();\n    const status = data.result?.status;\n    \n    // Проверяем статус членства\n    const isSubscribed = status === 'member' || \n                        status === 'administrator' || \n                        status === 'creator';\n    \n    return isSubscribed;\n  } catch (error) {\n    console.error('Error checking subscription:', error);\n    return false;\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}