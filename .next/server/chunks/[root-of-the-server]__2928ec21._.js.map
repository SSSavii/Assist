{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/init-database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\n\nconst dbPath = path.join(process.cwd(), 'main.db');\nconst db = new Database(dbPath, { verbose: console.log });\n\n// Создание таблиц (если ещё не созданы)\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tg_id INTEGER NOT NULL UNIQUE,\n    username TEXT,\n    first_name TEXT NOT NULL,\n    last_name TEXT,\n    referred_by_id INTEGER,\n    balance_crystals INTEGER NOT NULL DEFAULT 400,\n    last_tap_date TEXT,\n    daily_taps_count INTEGER NOT NULL DEFAULT 0,\n    bio TEXT,\n    awards TEXT,\n    cases_to_open INTEGER NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_login_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    subscribed INTEGER DEFAULT 0,\n    voted INTEGER DEFAULT 0,\n    FOREIGN KEY (referred_by_id) REFERENCES users(id)\n  )\n`);\n// Явно добавляем колонки, если их нет\ntry {\n  db.exec(\"ALTER TABLE users ADD COLUMN subscribed INTEGER DEFAULT 0;\");\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n} catch (e) {\n  // Колонка уже существует — это нормально\n}\n\ntry {\n  db.exec(\"ALTER TABLE users ADD COLUMN voted INTEGER DEFAULT 0;\");\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n} catch (e) {\n  // Колонка уже существует — это нормально\n}\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Lots (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    photoUrl TEXT,\n    city TEXT,\n    age INTEGER,\n    start_price INTEGER NOT NULL DEFAULT 0,\n    min_bid_step INTEGER NOT NULL DEFAULT 100,\n    current_price INTEGER NOT NULL DEFAULT 0,\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('DRAFT', 'ACTIVE', 'FINISHED', 'CANCELLED')),\n    expires_at TEXT NOT NULL,\n    winner_id INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (winner_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Bids (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    lot_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    amount INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (lot_id) REFERENCES Lots(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS case_winnings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    prize_name TEXT NOT NULL,\n    won_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY,\n    task_key TEXT NOT NULL UNIQUE,\n    title TEXT NOT NULL,\n    reward_crystals INTEGER DEFAULT 0\n  )\n`);\n\n// Вставка задач (если ещё не вставлены)\nconst insertTask = db.prepare(`\n  INSERT OR IGNORE INTO tasks (id, task_key, title, reward_crystals)\n  VALUES (@id, @task_key, @title, @reward_crystals)\n`);\n\ndb.transaction(() => {\n  insertTask.run({ id: 1, task_key: 'subscribe_channel', title: 'Подпишись на Ассист+', reward_crystals: 100 });\n  insertTask.run({ id: 2, task_key: 'vote_poll', title: 'Отдай голос на улучшение канала', reward_crystals: 500 });\n  insertTask.run({ id: 3, task_key: 'invite_friend_assistant', title: 'Пригласи друга, который хочет стать бизнес-ассистентом', reward_crystals: 500 });\n})();\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS user_tasks (\n    user_id INTEGER NOT NULL,\n    task_id INTEGER NOT NULL,\n    status TEXT NOT NULL DEFAULT 'completed',\n    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, task_id),\n    FOREIGN KEY(user_id) REFERENCES users(id),\n    FOREIGN KEY(task_id) REFERENCES tasks(id)\n  )\n`);\n\nconsole.log('✅ Все таблицы базы данных успешно инициализированы');\n\nexport default db;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACxC,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;IAAE,SAAS,QAAQ,GAAG;AAAC;AAEvD,wCAAwC;AACxC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;AAoBT,CAAC;AACD,sCAAsC;AACtC,IAAI;IACF,GAAG,IAAI,CAAC;AACV,6DAA6D;AAC7D,EAAE,OAAO,GAAG;AACV,yCAAyC;AAC3C;AAEA,IAAI;IACF,GAAG,IAAI,CAAC;AACV,6DAA6D;AAC7D,EAAE,OAAO,GAAG;AACV,yCAAyC;AAC3C;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;AAQT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;AAOT,CAAC;AAED,wCAAwC;AACxC,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC;;;AAG/B,CAAC;AAED,GAAG,WAAW,CAAC;IACb,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAqB,OAAO;QAAwB,iBAAiB;IAAI;IAC3G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAa,OAAO;QAAmC,iBAAiB;IAAI;IAC9G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAA2B,OAAO;QAA0D,iBAAiB;IAAI;AACrJ;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,QAAQ,GAAG,CAAC;uCAEG","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/telegram-auth.ts"],"sourcesContent":["import { createHmac } from 'crypto';\nimport { URLSearchParams } from 'url';\n\nexport function validateTelegramHash(initData: string, botToken: string): boolean {\n  try {\n    const params = new URLSearchParams(initData);\n    const hash = params.get('hash');\n    if (!hash) return false;\n    \n    params.delete('hash');\n    const dataCheckArr: string[] = [];\n    const sortedKeys = Array.from(params.keys()).sort();\n    \n    sortedKeys.forEach(key => dataCheckArr.push(`${key}=${params.get(key)}`));\n    const dataCheckString = dataCheckArr.join('\\n');\n    \n    const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest();\n    const ownHash = createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n    \n    return ownHash === hash;\n  } catch (error) {\n    console.error(\"Error during hash validation:\", error);\n    return false;\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,qBAAqB,QAAgB,EAAE,QAAgB;IACrE,IAAI;QACF,MAAM,SAAS,IAAI,+FAAA,CAAA,kBAAe,CAAC;QACnC,MAAM,OAAO,OAAO,GAAG,CAAC;QACxB,IAAI,CAAC,MAAM,OAAO;QAElB,OAAO,MAAM,CAAC;QACd,MAAM,eAAyB,EAAE;QACjC,MAAM,aAAa,MAAM,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI;QAEjD,WAAW,OAAO,CAAC,CAAA,MAAO,aAAa,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,OAAO,GAAG,CAAC,MAAM;QACvE,MAAM,kBAAkB,aAAa,IAAI,CAAC;QAE1C,MAAM,YAAY,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,cAAc,MAAM,CAAC,UAAU,MAAM;QAC5E,MAAM,UAAU,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,WAAW,MAAM,CAAC,iBAAiB,MAAM,CAAC;QAE/E,OAAO,YAAY;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/auth/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport db from '@/lib/init-database';\nimport { validateTelegramHash } from '@/lib/telegram-auth';\n\nconst REFERRAL_BONUS = 500;\n\n// Интерфейс пользователя из базы данных\ninterface UserFromDB {\n  id: number;\n  tg_id: number;\n  username: string | null;\n  first_name: string;\n  last_name: string | null;\n  referred_by_id: number | null;\n  balance_crystals: number;\n  last_tap_date: string | null;\n  daily_taps_count: number;\n  cases_to_open: number;\n  created_at: string;\n  last_login_at: string;\n  subscribed: number; // 0 или 1\n  voted: number;     // 0 или 1\n}\n\n// Ответ, который будет отправлен на клиент\ninterface AuthResponse extends Omit<UserFromDB, 'subscribed' | 'voted'> {\n  tasks_completed: {\n    subscribe: boolean;\n    vote: boolean;\n    invite: boolean;\n  };\n}\n\nexport async function POST(req: NextRequest) {\n  console.log(`\\n\\n--- [${new Date().toISOString()}] Received /api/auth request ---`);\n  try {\n    const { initData } = await req.json();\n    console.log('[STEP 1] Received initData:', !!initData);\n\n    if (!initData) {\n      console.error('[FAIL] initData is missing from request body.');\n      return NextResponse.json({ error: 'initData is required' }, { status: 400 });\n    }\n\n    const botToken = process.env.BOT_TOKEN;\n    console.log('[STEP 2] BOT_TOKEN loaded from .env:', !!botToken);\n    if (!botToken) {\n      console.error('CRITICAL: BOT_TOKEN is not defined in environment variables.');\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n\n    const isValid = validateTelegramHash(initData, botToken);\n    console.log('[STEP 3] Hash validation result:', isValid);\n    if (!isValid) {\n      console.warn('[FAIL] Hash validation failed. Request rejected.');\n      return NextResponse.json({ error: 'Invalid data: hash validation failed' }, { status: 403 });\n    }\n\n    console.log('[SUCCESS] Hash validation passed. Processing data...');\n    const params = new URLSearchParams(initData);\n    const userData = JSON.parse(params.get('user') || '{}');\n    const startParam = params.get('start_param');\n\n    if (!userData.id) {\n      console.error('[FAIL] User data or user ID is missing in initData.');\n      return NextResponse.json({ error: 'Invalid user data in initData' }, { status: 400 });\n    }\n    console.log(`[INFO] Processing user with tg_id: ${userData.id}`);\n\n    let finalUser: UserFromDB | undefined;\n    const findUserStmt = db.prepare(`\n      SELECT \n        id,\n        tg_id,\n        username,\n        first_name,\n        last_name,\n        referred_by_id,\n        balance_crystals,\n        last_tap_date,\n        daily_taps_count,\n        cases_to_open,\n        created_at,\n        last_login_at,\n        COALESCE(subscribed, 0) AS subscribed,\n        COALESCE(voted, 0) AS voted\n      FROM users \n      WHERE tg_id = ?\n    `);\n    const existingUser = findUserStmt.get(userData.id) as UserFromDB | undefined;\n\n    if (existingUser) {\n      console.log(`[DB LOGIC] User ${userData.id} FOUND. Updating...`);\n      const updateUserStmt = db.prepare(`\n        UPDATE users\n        SET username = ?, first_name = ?, last_name = ?, last_login_at = CURRENT_TIMESTAMP\n        WHERE tg_id = ?\n      `);\n      updateUserStmt.run(userData.username, userData.first_name, userData.last_name, userData.id);\n      finalUser = findUserStmt.get(userData.id) as UserFromDB;\n      console.log(`[DB LOGIC] User ${userData.id} UPDATED.`);\n\n    } else {\n      console.log(`[DB LOGIC] User ${userData.id} NOT FOUND. Creating...`);\n      let referredById: number | null = null;\n\n      if (startParam && startParam.startsWith('ref_')) {\n        const refIdStr = startParam.split('_')[1];\n        const refId = parseInt(refIdStr, 10);\n\n        if (!isNaN(refId)) {\n          const findReferrerStmt = db.prepare('SELECT id FROM users WHERE id = ?');\n          const referrer = findReferrerStmt.get(refId) as { id: number } | undefined;\n\n          if (referrer) {\n            referredById = referrer.id;\n\n            const rewardTransaction = db.transaction(() => {\n              db.prepare('UPDATE users SET balance_crystals = balance_crystals + ? WHERE id = ?').run(\n                REFERRAL_BONUS,\n                referredById\n              );\n              db.prepare('UPDATE users SET cases_to_open = cases_to_open + 1 WHERE id = ?').run(referredById);\n            });\n\n            try {\n              rewardTransaction();\n              console.log(`[REFERRAL] Rewarded user ${referredById} with ${REFERRAL_BONUS} crystals and 1 case.`);\n            } catch (e) {\n              console.error(`[ERROR] Failed to reward user ${referredById}. Error:`, e);\n            }\n          } else {\n            console.log(`[REFERRAL] Invalid referrer ID '${refIdStr}' in start_param. No referrer found.`);\n          }\n        }\n      }\n\n      const insertUserStmt = db.prepare(`\n        INSERT INTO users (\n          tg_id, username, first_name, last_name, referred_by_id,\n          subscribed, voted\n        ) VALUES (?, ?, ?, ?, ?, 0, 0)\n      `);\n      const result = insertUserStmt.run(\n        userData.id,\n        userData.username,\n        userData.first_name,\n        userData.last_name,\n        referredById\n      );\n      console.log(`[DB LOGIC] New user CREATED with rowid: ${result.lastInsertRowid}`);\n\n      const findNewUserStmt = db.prepare(`\n        SELECT * FROM users WHERE id = ?\n      `);\n      finalUser = findNewUserStmt.get(result.lastInsertRowid) as UserFromDB;\n    }\n\n    if (!finalUser) {\n      console.error('[FATAL] Final user object is undefined after creation/update.');\n      return NextResponse.json({ error: 'Failed to load user data' }, { status: 500 });\n    }\n\n    // Формируем ответ с задачами\n    const response: AuthResponse = {\n      ...finalUser,\n      tasks_completed: {\n        subscribe: !!finalUser.subscribed,\n        vote: !!finalUser.voted,\n        invite: false,\n      },\n    };\n\n    console.log('[SUCCESS] Sending final user data to client:', response);\n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('--- [FATAL ERROR] API /api/auth crashed inside try...catch block: ---');\n    if (error instanceof Error) {\n      console.error('Error Name:', error.name);\n      console.error('Error Message:', error.message);\n      console.error('Error Stack:', error.stack);\n    } else {\n      console.error('An unknown error occurred:', error);\n    }\n    return NextResponse.json(\n      { error: 'Internal Server Error', details: (error as Error).message },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}