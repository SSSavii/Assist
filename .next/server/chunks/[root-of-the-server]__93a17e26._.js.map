{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/init-database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\n\nconst dbPath = path.join(process.cwd(), 'main.db');\nconst db = new Database(dbPath, { verbose: console.log });\n\n// Создание таблиц (если ещё не созданы)\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tg_id INTEGER NOT NULL UNIQUE,\n    username TEXT,\n    first_name TEXT NOT NULL,\n    last_name TEXT,\n    referred_by_id INTEGER,\n    balance_crystals INTEGER NOT NULL DEFAULT 400,\n    last_tap_date TEXT,\n    daily_taps_count INTEGER NOT NULL DEFAULT 0,\n    bio TEXT,\n    awards TEXT,\n    cases_to_open INTEGER NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_login_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    subscribed INTEGER DEFAULT 0,\n    voted INTEGER DEFAULT 0\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Lots (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    photoUrl TEXT,\n    city TEXT,\n    age INTEGER,\n    start_price INTEGER NOT NULL DEFAULT 0,\n    min_bid_step INTEGER NOT NULL DEFAULT 100,\n    current_price INTEGER NOT NULL DEFAULT 0,\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('DRAFT', 'ACTIVE', 'FINISHED', 'CANCELLED')),\n    expires_at TEXT NOT NULL,\n    winner_id INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (winner_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Bids (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    lot_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    amount INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (lot_id) REFERENCES Lots(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS case_winnings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    prize_name TEXT NOT NULL,\n    won_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY,\n    task_key TEXT NOT NULL UNIQUE,\n    title TEXT NOT NULL,\n    reward_crystals INTEGER DEFAULT 0\n  )\n`);\n\n// Вставка задач (если ещё не вставлены)\nconst insertTask = db.prepare(`\n  INSERT OR IGNORE INTO tasks (id, task_key, title, reward_crystals)\n  VALUES (@id, @task_key, @title, @reward_crystals)\n`);\n\ndb.transaction(() => {\n  insertTask.run({ id: 1, task_key: 'subscribe_channel', title: 'Подпишись на Ассист+', reward_crystals: 100 });\n  insertTask.run({ id: 2, task_key: 'vote_poll', title: 'Отдай голос на улучшение канала', reward_crystals: 500 });\n  insertTask.run({ id: 3, task_key: 'invite_friend', title: 'Пригласи друга', reward_crystals: 500 });\n})();\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS user_tasks (\n    user_id INTEGER NOT NULL,\n    task_id INTEGER NOT NULL,\n    status TEXT NOT NULL DEFAULT 'completed',\n    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, task_id),\n    FOREIGN KEY(user_id) REFERENCES users(id),\n    FOREIGN KEY(task_id) REFERENCES tasks(id)\n  )\n`);\n\nconsole.log('✅ Все таблицы базы данных успешно инициализированы');\n\nexport default db;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACxC,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;IAAE,SAAS,QAAQ,GAAG;AAAC;AAEvD,wCAAwC;AACxC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;AAmBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;AAQT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;AAOT,CAAC;AAED,wCAAwC;AACxC,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC;;;AAG/B,CAAC;AAED,GAAG,WAAW,CAAC;IACb,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAqB,OAAO;QAAwB,iBAAiB;IAAI;IAC3G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAa,OAAO;QAAmC,iBAAiB;IAAI;IAC9G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAiB,OAAO;QAAkB,iBAAiB;IAAI;AACnG;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,QAAQ,GAAG,CAAC;uCAEG","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/telegram-auth.ts"],"sourcesContent":["import { createHmac } from 'crypto';\nimport { URLSearchParams } from 'url';\n\nexport function validateTelegramHash(initData: string, botToken: string): boolean {\n  try {\n    const params = new URLSearchParams(initData);\n    const hash = params.get('hash');\n    if (!hash) return false;\n    \n    params.delete('hash');\n    const dataCheckArr: string[] = [];\n    const sortedKeys = Array.from(params.keys()).sort();\n    \n    sortedKeys.forEach(key => dataCheckArr.push(`${key}=${params.get(key)}`));\n    const dataCheckString = dataCheckArr.join('\\n');\n    \n    const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest();\n    const ownHash = createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n    \n    return ownHash === hash;\n  } catch (error) {\n    console.error(\"Error during hash validation:\", error);\n    return false;\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,qBAAqB,QAAgB,EAAE,QAAgB;IACrE,IAAI;QACF,MAAM,SAAS,IAAI,+FAAA,CAAA,kBAAe,CAAC;QACnC,MAAM,OAAO,OAAO,GAAG,CAAC;QACxB,IAAI,CAAC,MAAM,OAAO;QAElB,OAAO,MAAM,CAAC;QACd,MAAM,eAAyB,EAAE;QACjC,MAAM,aAAa,MAAM,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI;QAEjD,WAAW,OAAO,CAAC,CAAA,MAAO,aAAa,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,OAAO,GAAG,CAAC,MAAM;QACvE,MAAM,kBAAkB,aAAa,IAAI,CAAC;QAE1C,MAAM,YAAY,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,cAAc,MAAM,CAAC,UAAU,MAAM;QAC5E,MAAM,UAAU,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,WAAW,MAAM,CAAC,iBAAiB,MAAM,CAAC;QAE/E,OAAO,YAAY;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/check-subscription/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { URLSearchParams } from 'url';\n\nimport db from '@/lib/init-database';\nimport { validateTelegramHash } from '@/lib/telegram-auth';\n\nconst REFERRAL_BONUS = 500;\n\ninterface UserFromDB {\n  id: number;\n  tg_id: number;\n  username: string | null;\n  first_name: string;\n  last_name: string | null;\n  referred_by_id: number | null;\n  balance_crystals: number;\n  last_tap_date: string | null;\n  daily_taps_count: number;\n  cases_to_open: number;\n  created_at: string;\n  last_login_at: string;\n  subscribed: number;\n  voted: number;\n}\n\ninterface AuthResponse {\n  id: number;\n  tg_id: number;\n  username: string | null;\n  first_name: string;\n  last_name: string | null;\n  balance_crystals: number;\n  last_tap_date: string | null;\n  daily_taps_count: number;\n  cases_to_open: number;\n  created_at: string;\n  last_login_at: string;\n  subscribed_to_channel?: boolean;\n  voted_for_channel?: boolean;\n  tasks_completed: {\n    subscribe: boolean;\n    vote: boolean;\n    invite: boolean;\n  };\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { initData } = await req.json();\n\n    if (!initData) {\n      return NextResponse.json({ error: 'initData is required' }, { status: 400 });\n    }\n\n    const botToken = process.env.BOT_TOKEN;\n    if (!botToken) {\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n\n    if (!validateTelegramHash(initData, botToken)) {\n      return NextResponse.json({ error: 'Invalid Telegram hash' }, { status: 403 });\n    }\n\n    const params = new URLSearchParams(initData);\n    const userData = JSON.parse(params.get('user') || '{}');\n    const startParam = params.get('startapp') || params.get('start_param');\n\n    if (!userData.id) {\n      return NextResponse.json({ error: 'Invalid user data' }, { status: 400 });\n    }\n\n    // Проверяем выполненные задачи пользователя\n    const checkTasksStmt = db.prepare(`\n      SELECT t.task_key \n      FROM user_tasks ut \n      JOIN tasks t ON ut.task_id = t.id \n      WHERE ut.user_id = (SELECT id FROM users WHERE tg_id = ?)\n    `);\n\n    // Находим или создаем пользователя\n    const findUserStmt = db.prepare(`\n      SELECT * FROM users WHERE tg_id = ?\n    `);\n    \n    let user = findUserStmt.get(userData.id) as UserFromDB | undefined;\n\n    if (user) {\n      // Обновляем существующего пользователя\n      const updateStmt = db.prepare(`\n        UPDATE users \n        SET username = ?, first_name = ?, last_name = ?, last_login_at = CURRENT_TIMESTAMP \n        WHERE tg_id = ?\n      `);\n      updateStmt.run(userData.username, userData.first_name, userData.last_name, userData.id);\n      user = findUserStmt.get(userData.id) as UserFromDB;\n    } else {\n      // Создаем нового пользователя\n      let referredById = null;\n\n      // Обработка реферальной ссылки - ВАЖНОЕ ИСПРАВЛЕНИЕ\n      if (startParam && startParam.startsWith('ref_')) {\n        const referrerIdStr = startParam.replace('ref_', '');\n        const referrerId = parseInt(referrerIdStr, 10);\n        \n        console.log('Referrer ID from param:', referrerId);\n        \n        if (!isNaN(referrerId)) {\n          // ИСПРАВЛЕНИЕ: Ищем реферера по внутреннему id, а не по tg_id\n          const referrerStmt = db.prepare('SELECT id FROM users WHERE id = ?');\n          const referrer = referrerStmt.get(referrerId) as { id: number } | undefined;\n          \n          console.log('Found referrer:', referrer);\n          \n          if (referrer) {\n            referredById = referrer.id;\n            \n            // Награждаем реферера\n            const rewardStmt = db.prepare(`\n              UPDATE users \n              SET balance_crystals = balance_crystals + ?, cases_to_open = cases_to_open + 1 \n              WHERE id = ?\n            `);\n            rewardStmt.run(REFERRAL_BONUS, referredById);\n            console.log('Rewarded referrer:', referredById);\n          }\n        }\n      }\n\n      const insertStmt = db.prepare(`\n        INSERT INTO users (tg_id, username, first_name, last_name, referred_by_id, balance_crystals)\n        VALUES (?, ?, ?, ?, ?, 400)\n      `);\n      \n      console.log('Creating user with referred_by_id:', referredById);\n      \n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const result = insertStmt.run(\n        userData.id,\n        userData.username,\n        userData.first_name,\n        userData.last_name,\n        referredById\n      );\n\n      user = findUserStmt.get(userData.id) as UserFromDB;\n      console.log('New user created:', user);\n    }\n\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Получаем выполненные задачи\n    const completedTasks = checkTasksStmt.all(user.id) as { task_key: string }[];\n    const completedTaskKeys = completedTasks.map(task => task.task_key);\n\n    const response: AuthResponse = {\n      id: user.id,\n      tg_id: user.tg_id,\n      username: user.username,\n      first_name: user.first_name,\n      last_name: user.last_name,\n      balance_crystals: user.balance_crystals,\n      last_tap_date: user.last_tap_date,\n      daily_taps_count: user.daily_taps_count,\n      cases_to_open: user.cases_to_open,\n      created_at: user.created_at,\n      last_login_at: user.last_login_at,\n      subscribed_to_channel: user.subscribed === 1,\n      voted_for_channel: user.voted === 1,\n      tasks_completed: {\n        subscribe: completedTaskKeys.includes('subscribe_channel'),\n        vote: completedTaskKeys.includes('vote_poll'),\n        invite: completedTaskKeys.includes('invite_friend')\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('Auth error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}