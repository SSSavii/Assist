{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/db.ts"],"sourcesContent":["import Database from 'better-sqlite3';\n\nconst db = new Database('./main.db', { verbose: console.log });\n\nprocess.on('exit', () => db.close());\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,aAAa;IAAE,SAAS,QAAQ,GAAG;AAAC;AAE5D,QAAQ,EAAE,CAAC,QAAQ,IAAM,GAAG,KAAK;uCAElB","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/check-subscription/route.ts"],"sourcesContent":["// app/api/check-subscription/route.ts\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { URLSearchParams } from 'url';\nimport { createHmac } from 'crypto';\nimport axios from 'axios'; // Убедись, что установлен: npm install axios\n\nimport db from 'wxqryy/lib/db'; // Или импортируй как у тебя подключена БД\nconst BOT_TOKEN = process.env.BOT_TOKEN;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst BOT_USERNAME = process.env.NEXT_PUBLIC_TELEGRAM_BOT_USERNAME;\n\n// Функция проверки хеша от Telegram\nfunction validateTelegramHash(initData: string, botToken: string): boolean {\n  try {\n    const params = new URLSearchParams(initData);\n    const hash = params.get('hash');\n    if (!hash) return false;\n    params.delete('hash');\n\n    const dataCheckArr: string[] = [];\n    const sortedKeys = Array.from(params.keys()).sort();\n    sortedKeys.forEach((key) => {\n      dataCheckArr.push(`${key}=${params.get(key)}`);\n    });\n    const dataCheckString = dataCheckArr.join('\\n');\n\n    const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest();\n    const ownHash = createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n\n    return ownHash === hash;\n  } catch (error) {\n    console.error('Hash validation error:', error);\n    return false;\n  }\n}\n\n// Функция проверки подписки через Bot API\nasync function isUserSubscribed(userId: number, chatId: string): Promise<boolean> {\n  try {\n    const response = await axios.get(\n      `https://api.telegram.org/bot${BOT_TOKEN}/getChatMember`,\n      {\n        params: {\n          chat_id: chatId,\n          user_id: userId,\n        },\n      }\n    );\n\n    const status = response.data.result?.status;\n    return ['member', 'administrator', 'creator'].includes(status);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    if (error.response?.data?.description === 'Bad Request: user not found') {\n      return false;\n    }\n    console.error('Error checking subscription:', error);\n    return false;\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { initData, taskId } = await req.json();\n\n    if (!initData || !BOT_TOKEN || !validateTelegramHash(initData, BOT_TOKEN)) {\n      return NextResponse.json({ success: false, message: 'Ошибка авторизации' }, { status: 403 });\n    }\n\n    const params = new URLSearchParams(initData);\n    const userData = JSON.parse(params.get('user') || '{}');\n    const userId = userData.id;\n\n    if (!userId) {\n      return NextResponse.json({ success: false, message: 'Пользователь не найден' }, { status: 400 });\n    }\n\n    // Определяем чат и награду\n    let chatId: string;\n    let reward: number;\n    let dbField: string;\n\n    if (taskId === 'subscribe') {\n      chatId = '@assistplus_channel'; // или \"-1001234567890\"\n      reward = 100;\n      dbField = 'subscribed';\n    } else if (taskId === 'vote') {\n      chatId = '@assistplus_channel';\n      reward = 500;\n      dbField = 'voted';\n    } else {\n      return NextResponse.json({ success: false, message: 'Неверное задание' }, { status: 400 });\n    }\n\n    // Проверяем, уже ли выполнено\n    const checkStmt = db.prepare(`SELECT ${dbField}, balance_crystals FROM users WHERE tg_id = ?`);\n    const userRow = checkStmt.get(userId) as { [key: string]: number } | undefined;\n\n    if (!userRow) {\n      return NextResponse.json({ success: false, message: 'Пользователь не найден в базе' }, { status: 404 });\n    }\n\n    if (userRow[dbField]) {\n      return NextResponse.json({ success: false, message: 'Награда уже получена' });\n    }\n\n    // Проверяем подписку\n    const isSubscribed = await isUserSubscribed(userId, chatId);\n    if (!isSubscribed) {\n      return NextResponse.json({ success: false, message: 'Вы не подписаны на канал.' });\n    }\n\n    // Начисляем награду\n    const newBalance = userRow.balance_crystals + reward;\n    const updateStmt = db.prepare(\n      `UPDATE users SET ${dbField} = 1, balance_crystals = ? WHERE tg_id = ?`\n    );\n    updateStmt.run(newBalance, userId);\n\n    return NextResponse.json({\n      success: true,\n      newBalance,\n    });\n  } catch (error) {\n    console.error('Error in /api/check-subscription:', error);\n    return NextResponse.json({ success: false, message: 'Ошибка сервера' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}