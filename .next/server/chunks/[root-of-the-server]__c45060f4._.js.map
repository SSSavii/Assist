{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/init-database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\n\nconst dbPath = path.join(process.cwd(), 'main.db');\nconst db = new Database(dbPath, { verbose: console.log });\n\n// Создание таблиц (если ещё не созданы)\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tg_id INTEGER NOT NULL UNIQUE,\n    username TEXT,\n    first_name TEXT NOT NULL,\n    last_name TEXT,\n    referred_by_id INTEGER,\n    balance_crystals INTEGER NOT NULL DEFAULT 400,\n    last_tap_date TEXT,\n    daily_taps_count INTEGER NOT NULL DEFAULT 0,\n    bio TEXT,\n    awards TEXT,\n    cases_to_open INTEGER NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_login_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    subscribed INTEGER DEFAULT 0,\n    voted INTEGER DEFAULT 0\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Lots (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    photoUrl TEXT,\n    city TEXT,\n    age INTEGER,\n    start_price INTEGER NOT NULL DEFAULT 0,\n    min_bid_step INTEGER NOT NULL DEFAULT 100,\n    current_price INTEGER NOT NULL DEFAULT 0,\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('DRAFT', 'ACTIVE', 'FINISHED', 'CANCELLED')),\n    expires_at TEXT NOT NULL,\n    winner_id INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (winner_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Bids (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    lot_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    amount INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (lot_id) REFERENCES Lots(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS case_winnings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    prize_name TEXT NOT NULL,\n    won_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY,\n    task_key TEXT NOT NULL UNIQUE,\n    title TEXT NOT NULL,\n    reward_crystals INTEGER DEFAULT 0\n  )\n`);\n\n// Вставка задач (если ещё не вставлены)\nconst insertTask = db.prepare(`\n  INSERT OR IGNORE INTO tasks (id, task_key, title, reward_crystals)\n  VALUES (@id, @task_key, @title, @reward_crystals)\n`);\n\ndb.transaction(() => {\n  insertTask.run({ id: 1, task_key: 'subscribe_channel', title: 'Подпишись на Ассист+', reward_crystals: 100 });\n  insertTask.run({ id: 2, task_key: 'vote_poll', title: 'Отдай голос на улучшение канала', reward_crystals: 500 });\n  insertTask.run({ id: 3, task_key: 'invite_friend', title: 'Пригласи друга', reward_crystals: 500 });\n})();\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS user_tasks (\n    user_id INTEGER NOT NULL,\n    task_id INTEGER NOT NULL,\n    status TEXT NOT NULL DEFAULT 'completed',\n    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, task_id),\n    FOREIGN KEY(user_id) REFERENCES users(id),\n    FOREIGN KEY(task_id) REFERENCES tasks(id)\n  )\n`);\n\nconsole.log('✅ Все таблицы базы данных успешно инициализированы');\n\nexport default db;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACxC,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;IAAE,SAAS,QAAQ,GAAG;AAAC;AAEvD,wCAAwC;AACxC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;AAmBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;AAQT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;AAOT,CAAC;AAED,wCAAwC;AACxC,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC;;;AAG/B,CAAC;AAED,GAAG,WAAW,CAAC;IACb,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAqB,OAAO;QAAwB,iBAAiB;IAAI;IAC3G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAa,OAAO;QAAmC,iBAAiB;IAAI;IAC9G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAiB,OAAO;QAAkB,iBAAiB;IAAI;AACnG;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,QAAQ,GAAG,CAAC;uCAEG","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/check-subscription/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { URLSearchParams } from 'url';\nimport { createHmac } from 'crypto';\nimport axios from 'axios';\nimport db from '@/lib/init-database';\n\nconst BOT_TOKEN = process.env.BOT_TOKEN;\nconst CHANNEL_USERNAME = '@assistplus_business';\n\nfunction validateTelegramHash(initData: string, botToken: string): boolean {\n  try {\n    const params = new URLSearchParams(initData);\n    const hash = params.get('hash');\n    if (!hash) return false;\n    params.delete('hash');\n    \n    const dataCheckArr: string[] = [];\n    const sortedKeys = Array.from(params.keys()).sort();\n    sortedKeys.forEach((key) => {\n      dataCheckArr.push(`${key}=${params.get(key)}`);\n    });\n    \n    const dataCheckString = dataCheckArr.join('\\n');\n    const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest();\n    const ownHash = createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n    \n    return ownHash === hash;\n  } catch (error) {\n    console.error('Hash validation error:', error);\n    return false;\n  }\n}\n\nasync function isUserSubscribed(userId: number): Promise<boolean> {\n  try {\n    const response = await axios.get(\n      `https://api.telegram.org/bot${BOT_TOKEN}/getChatMember`,\n      {\n        params: {\n          chat_id: CHANNEL_USERNAME,\n          user_id: userId,\n        },\n      }\n    );\n\n    const status = response.data.result?.status;\n    return ['member', 'administrator', 'creator'].includes(status);\n  } catch (error) {\n    console.error('Error checking subscription:', error);\n    return false;\n  }\n}\n\nasync function checkUserReferrals(userId: number): Promise<number> {\n  try {\n    const userStmt = db.prepare('SELECT id FROM users WHERE tg_id = ?');\n    const user = userStmt.get(userId) as { id: number } | undefined;\n    \n    if (!user) return 0;\n\n    const refStmt = db.prepare('SELECT COUNT(*) as count FROM users WHERE referred_by_id = ?');\n    const result = refStmt.get(user.id) as { count: number };\n    return result.count;\n  } catch (error) {\n    console.error('Error checking referrals:', error);\n    return 0;\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { initData, taskId } = await req.json();\n\n    if (!initData || !BOT_TOKEN) {\n      return NextResponse.json({ success: false, message: 'Ошибка конфигурации' }, { status: 500 });\n    }\n\n    if (!validateTelegramHash(initData, BOT_TOKEN)) {\n      return NextResponse.json({ success: false, message: 'Неверные данные' }, { status: 403 });\n    }\n\n    const params = new URLSearchParams(initData);\n    const userData = JSON.parse(params.get('user') || '{}');\n    const userId = userData.id;\n\n    if (!userId) {\n      return NextResponse.json({ success: false, message: 'Не удалось определить пользователя' }, { status: 400 });\n    }\n\n    // Получаем ID пользователя в нашей БД\n    const userStmt = db.prepare('SELECT id FROM users WHERE tg_id = ?');\n    const user = userStmt.get(userId) as { id: number } | undefined;\n\n    if (!user) {\n      return NextResponse.json({ success: false, message: 'Пользователь не найден' }, { status: 404 });\n    }\n\n    const userDbId = user.id;\n\n    // Определяем задачу\n    let taskKey: string;\n    let reward: number;\n    let verificationResult = false;\n\n    if (taskId === 'subscribe') {\n      taskKey = 'subscribe_channel';\n      reward = 100;\n      verificationResult = await isUserSubscribed(userId);\n      \n    } else if (taskId === 'vote') {\n      taskKey = 'vote_poll';\n      reward = 500;\n      // Для голосования - временно всегда true\n      verificationResult = true;\n      \n    } else if (taskId === 'invite') {\n      taskKey = 'invite_friend';\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      reward = 500;\n      const referralCount = await checkUserReferrals(userId);\n      verificationResult = referralCount > 0;\n      \n    } else {\n      return NextResponse.json({ success: false, message: 'Неизвестная задача' }, { status: 400 });\n    }\n\n    // Находим задачу в БД\n    const taskStmt = db.prepare('SELECT id, reward_crystals FROM tasks WHERE task_key = ?');\n    const task = taskStmt.get(taskKey) as { id: number; reward_crystals: number } | undefined;\n\n    if (!task) {\n      return NextResponse.json({ success: false, message: 'Задача не найдена' }, { status: 404 });\n    }\n\n    // Проверяем, выполнена ли уже задача\n    const userTaskStmt = db.prepare('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?');\n    const userTask = userTaskStmt.get(userDbId, task.id);\n\n    if (userTask) {\n      return NextResponse.json({ success: false, message: 'Награда уже получена' });\n    }\n\n    // Проверяем выполнение условия\n    if (!verificationResult) {\n      if (taskId === 'subscribe') {\n        return NextResponse.json({ success: false, message: 'Вы не подписаны на канал.' });\n      } else if (taskId === 'invite') {\n        return NextResponse.json({ success: false, message: 'У вас нет приглашенных друзей.' });\n      } else {\n        return NextResponse.json({ success: false, message: 'Условия не выполнены.' });\n      }\n    }\n\n    // Начисляем награду\n    const balanceStmt = db.prepare('SELECT balance_crystals FROM users WHERE id = ?');\n    const currentBalance = (balanceStmt.get(userDbId) as { balance_crystals: number }).balance_crystals;\n    const newBalance = currentBalance + task.reward_crystals;\n\n    const updateBalanceStmt = db.prepare('UPDATE users SET balance_crystals = ? WHERE id = ?');\n    const insertTaskStmt = db.prepare(\"INSERT INTO user_tasks (user_id, task_id, status) VALUES (?, ?, 'completed')\");\n\n    db.transaction(() => {\n      updateBalanceStmt.run(newBalance, userDbId);\n      insertTaskStmt.run(userDbId, task.id);\n    })();\n\n    // Обновляем флаги в основной таблице users\n    if (taskId === 'subscribe') {\n      const updateSubStmt = db.prepare('UPDATE users SET subscribed = 1 WHERE id = ?');\n      updateSubStmt.run(userDbId);\n    } else if (taskId === 'vote') {\n      const updateVoteStmt = db.prepare('UPDATE users SET voted = 1 WHERE id = ?');\n      updateVoteStmt.run(userDbId);\n    }\n\n    return NextResponse.json({\n      success: true,\n      newBalance,\n      reward: task.reward_crystals,\n      message: `Задание выполнено! Получено +${task.reward_crystals} плюсов.`,\n    });\n\n  } catch (error) {\n    console.error('Error in check-subscription:', error);\n    return NextResponse.json({ success: false, message: 'Ошибка сервера' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}