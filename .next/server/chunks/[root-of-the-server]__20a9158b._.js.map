{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/init-database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\n\nconst dbPath = path.join(process.cwd(), 'main.db');\nconst db = new Database(dbPath, { verbose: console.log });\n\n// Создание таблиц (если ещё не созданы)\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tg_id INTEGER NOT NULL UNIQUE,\n    username TEXT,\n    first_name TEXT NOT NULL,\n    last_name TEXT,\n    referred_by_id INTEGER,\n    balance_crystals INTEGER NOT NULL DEFAULT 400,\n    last_tap_date TEXT,\n    daily_taps_count INTEGER NOT NULL DEFAULT 0,\n    bio TEXT,\n    awards TEXT,\n    cases_to_open INTEGER NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_login_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    subscribed INTEGER DEFAULT 0,\n    voted INTEGER DEFAULT 0\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Lots (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    photoUrl TEXT,\n    city TEXT,\n    age INTEGER,\n    start_price INTEGER NOT NULL DEFAULT 0,\n    min_bid_step INTEGER NOT NULL DEFAULT 100,\n    current_price INTEGER NOT NULL DEFAULT 0,\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('DRAFT', 'ACTIVE', 'FINISHED', 'CANCELLED')),\n    expires_at TEXT NOT NULL,\n    winner_id INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (winner_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Bids (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    lot_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    amount INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (lot_id) REFERENCES Lots(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS case_winnings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    prize_name TEXT NOT NULL,\n    won_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY,\n    task_key TEXT NOT NULL UNIQUE,\n    title TEXT NOT NULL,\n    reward_crystals INTEGER DEFAULT 0\n  )\n`);\n\n// Вставка задач (если ещё не вставлены)\nconst insertTask = db.prepare(`\n  INSERT OR IGNORE INTO tasks (id, task_key, title, reward_crystals)\n  VALUES (@id, @task_key, @title, @reward_crystals)\n`);\n\ndb.transaction(() => {\n  insertTask.run({ id: 1, task_key: 'subscribe_channel', title: 'Подпишись на Ассист+', reward_crystals: 100 });\n  insertTask.run({ id: 2, task_key: 'vote_poll', title: 'Отдай голос на улучшение канала', reward_crystals: 500 });\n  insertTask.run({ id: 3, task_key: 'invite_friend', title: 'Пригласи друга', reward_crystals: 500 });\n})();\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS user_tasks (\n    user_id INTEGER NOT NULL,\n    task_id INTEGER NOT NULL,\n    status TEXT NOT NULL DEFAULT 'completed',\n    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, task_id),\n    FOREIGN KEY(user_id) REFERENCES users(id),\n    FOREIGN KEY(task_id) REFERENCES tasks(id)\n  )\n`);\n\nconsole.log('✅ Все таблицы базы данных успешно инициализированы');\n\nexport default db;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACxC,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;IAAE,SAAS,QAAQ,GAAG;AAAC;AAEvD,wCAAwC;AACxC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;AAmBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;AAQT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;AAOT,CAAC;AAED,wCAAwC;AACxC,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC;;;AAG/B,CAAC;AAED,GAAG,WAAW,CAAC;IACb,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAqB,OAAO;QAAwB,iBAAiB;IAAI;IAC3G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAa,OAAO;QAAmC,iBAAiB;IAAI;IAC9G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAiB,OAAO;QAAkB,iBAAiB;IAAI;AACnG;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,QAAQ,GAAG,CAAC;uCAEG","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/telegram-auth.ts"],"sourcesContent":["import { createHmac } from 'crypto';\nimport { URLSearchParams } from 'url';\n\nexport function validateTelegramHash(initData: string, botToken: string): boolean {\n  try {\n    const params = new URLSearchParams(initData);\n    const hash = params.get('hash');\n    if (!hash) return false;\n    \n    params.delete('hash');\n    const dataCheckArr: string[] = [];\n    const sortedKeys = Array.from(params.keys()).sort();\n    \n    sortedKeys.forEach(key => dataCheckArr.push(`${key}=${params.get(key)}`));\n    const dataCheckString = dataCheckArr.join('\\n');\n    \n    const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest();\n    const ownHash = createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n    \n    return ownHash === hash;\n  } catch (error) {\n    console.error(\"Error during hash validation:\", error);\n    return false;\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,qBAAqB,QAAgB,EAAE,QAAgB;IACrE,IAAI;QACF,MAAM,SAAS,IAAI,+FAAA,CAAA,kBAAe,CAAC;QACnC,MAAM,OAAO,OAAO,GAAG,CAAC;QACxB,IAAI,CAAC,MAAM,OAAO;QAElB,OAAO,MAAM,CAAC;QACd,MAAM,eAAyB,EAAE;QACjC,MAAM,aAAa,MAAM,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI;QAEjD,WAAW,OAAO,CAAC,CAAA,MAAO,aAAa,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,OAAO,GAAG,CAAC,MAAM;QACvE,MAAM,kBAAkB,aAAa,IAAI,CAAC;QAE1C,MAAM,YAAY,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,cAAc,MAAM,CAAC,UAAU,MAAM;QAC5E,MAAM,UAAU,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,WAAW,MAAM,CAAC,iBAAiB,MAAM,CAAC;QAE/E,OAAO,YAAY;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/check-subscription/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextRequest, NextResponse } from 'next/server';\nimport db from '@/lib/init-database';\nimport { validateTelegramHash } from '@/lib/telegram-auth';\n\nconst BOT_TOKEN = process.env.BOT_TOKEN;\nconst CHANNEL_USERNAME = '@assistplus_business'; // Убедитесь, что начинается с @\n\ninterface TaskRewards {\n  subscribe: number;\n  vote: number;\n  invite: number;\n}\n\nconst TASK_REWARDS: TaskRewards = {\n  subscribe: 100,\n  vote: 500,\n  invite: 500\n};\n\nconst TASK_KEYS = {\n  subscribe: 'subscribe_channel',\n  vote: 'vote_poll',\n  invite: 'invite_friend'\n};\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { initData, taskId } = await req.json();\n\n    if (!initData) {\n      return NextResponse.json({ error: 'initData is required' }, { status: 400 });\n    }\n\n    if (!taskId || !['subscribe', 'vote', 'invite'].includes(taskId)) {\n      return NextResponse.json({ error: 'Valid taskId is required' }, { status: 400 });\n    }\n\n    const botToken = process.env.BOT_TOKEN;\n    if (!botToken) {\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n\n    if (!validateTelegramHash(initData, botToken)) {\n      return NextResponse.json({ error: 'Invalid Telegram hash' }, { status: 403 });\n    }\n\n    const params = new URLSearchParams(initData);\n    const userData = JSON.parse(params.get('user') || '{}');\n\n    if (!userData.id) {\n      return NextResponse.json({ error: 'Invalid user data' }, { status: 400 });\n    }\n\n    // Находим пользователя\n    const findUserStmt = db.prepare('SELECT * FROM users WHERE tg_id = ?');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const user = findUserStmt.get(userData.id) as any;\n\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Проверяем, выполнена ли уже задача\n    const checkTaskStmt = db.prepare(`\n      SELECT 1 FROM user_tasks ut \n      JOIN tasks t ON ut.task_id = t.id \n      WHERE ut.user_id = ? AND t.task_key = ?\n    `);\n    \n    const taskCompleted = checkTaskStmt.get(user.id, TASK_KEYS[taskId as keyof typeof TASK_KEYS]);\n\n    if (taskCompleted) {\n      return NextResponse.json({ \n        success: false, \n        message: 'Задание уже выполнено' \n      });\n    }\n\n    let isCompleted = false;\n    let message = '';\n\n    switch (taskId) {\n      case 'subscribe':\n        // Проверка подписки на канал\n        try {\n          const chatMember = await checkChannelSubscription(userData.id);\n          isCompleted = chatMember?.status === 'member' || chatMember?.status === 'administrator' || chatMember?.status === 'creator';\n          message = isCompleted ? 'Подписка подтверждена!' : 'Вы не подписаны на канал';\n        } catch (error) {\n          console.error('Subscription check error:', error);\n          return NextResponse.json({ \n            success: false, \n            message: 'Ошибка проверки подписки. Попробуйте позже.' \n          });\n        }\n        break;\n\n      case 'vote':\n        // Для голосования пока возвращаем false - нужно реализовать проверку\n        isCompleted = false;\n        message = 'Проверка голосования временно недоступна';\n        break;\n\n      case 'invite':\n        // Проверка приглашенных друзей\n        const invitedFriendsStmt = db.prepare('SELECT COUNT(*) as count FROM users WHERE referred_by_id = ?');\n        const invitedCount = (invitedFriendsStmt.get(user.id) as any)?.count || 0;\n        isCompleted = invitedCount > 0;\n        message = isCompleted ? `Вы пригласили ${invitedCount} друзей!` : 'Вы еще никого не пригласили';\n        break;\n    }\n\n    if (isCompleted) {\n      // Награждаем пользователя\n      const reward = TASK_REWARDS[taskId as keyof TaskRewards];\n      \n      const updateBalanceStmt = db.prepare('UPDATE users SET balance_crystals = balance_crystals + ? WHERE id = ?');\n      updateBalanceStmt.run(reward, user.id);\n\n      // Отмечаем задачу как выполненную\n      const taskStmt = db.prepare('SELECT id FROM tasks WHERE task_key = ?');\n      const task = taskStmt.get(TASK_KEYS[taskId as keyof typeof TASK_KEYS]) as any;\n      \n      if (task) {\n        const insertTaskStmt = db.prepare(`\n          INSERT OR IGNORE INTO user_tasks (user_id, task_id, status) \n          VALUES (?, ?, 'completed')\n        `);\n        insertTaskStmt.run(user.id, task.id);\n      }\n\n      return NextResponse.json({\n        success: true,\n        message: `Награда получена: +${reward} плюсов!`,\n        reward: reward,\n        newBalance: user.balance_crystals + reward\n      });\n    } else {\n      return NextResponse.json({\n        success: false,\n        message: message\n      });\n    }\n\n  } catch (error) {\n    console.error('Check subscription error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Функция проверки подписки на канал\nasync function checkChannelSubscription(userId: number) {\n  if (!BOT_TOKEN || !CHANNEL_USERNAME) {\n    throw new Error('Bot token or channel username not configured');\n  }\n\n  const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getChatMember`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      chat_id: CHANNEL_USERNAME,\n      user_id: userId\n    })\n  });\n\n  if (!response.ok) {\n    throw new Error(`Telegram API error: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  return data.result;\n}"],"names":[],"mappings":"AAAA,qDAAqD;;;AACrD;AACA;AACA;;;;AAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,SAAS;AACvC,MAAM,mBAAmB,wBAAwB,gCAAgC;AAQjF,MAAM,eAA4B;IAChC,WAAW;IACX,MAAM;IACN,QAAQ;AACV;AAEA,MAAM,YAAY;IAChB,WAAW;IACX,MAAM;IACN,QAAQ;AACV;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QAE3C,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,IAAI,CAAC,UAAU,CAAC;YAAC;YAAa;YAAQ;SAAS,CAAC,QAAQ,CAAC,SAAS;YAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,MAAM,WAAW,QAAQ,GAAG,CAAC,SAAS;QACtC,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,IAAI,CAAC,CAAA,GAAA,gIAAA,CAAA,uBAAoB,AAAD,EAAE,UAAU,WAAW;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,MAAM,SAAS,IAAI,gBAAgB;QACnC,MAAM,WAAW,KAAK,KAAK,CAAC,OAAO,GAAG,CAAC,WAAW;QAElD,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,uBAAuB;QACvB,MAAM,eAAe,gIAAA,CAAA,UAAE,CAAC,OAAO,CAAC;QAChC,8DAA8D;QAC9D,MAAM,OAAO,aAAa,GAAG,CAAC,SAAS,EAAE;QAEzC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,qCAAqC;QACrC,MAAM,gBAAgB,gIAAA,CAAA,UAAE,CAAC,OAAO,CAAC,CAAC;;;;IAIlC,CAAC;QAED,MAAM,gBAAgB,cAAc,GAAG,CAAC,KAAK,EAAE,EAAE,SAAS,CAAC,OAAiC;QAE5F,IAAI,eAAe;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;YACX;QACF;QAEA,IAAI,cAAc;QAClB,IAAI,UAAU;QAEd,OAAQ;YACN,KAAK;gBACH,6BAA6B;gBAC7B,IAAI;oBACF,MAAM,aAAa,MAAM,yBAAyB,SAAS,EAAE;oBAC7D,cAAc,YAAY,WAAW,YAAY,YAAY,WAAW,mBAAmB,YAAY,WAAW;oBAClH,UAAU,cAAc,2BAA2B;gBACrD,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,6BAA6B;oBAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;wBACvB,SAAS;wBACT,SAAS;oBACX;gBACF;gBACA;YAEF,KAAK;gBACH,qEAAqE;gBACrE,cAAc;gBACd,UAAU;gBACV;YAEF,KAAK;gBACH,+BAA+B;gBAC/B,MAAM,qBAAqB,gIAAA,CAAA,UAAE,CAAC,OAAO,CAAC;gBACtC,MAAM,eAAe,AAAC,mBAAmB,GAAG,CAAC,KAAK,EAAE,GAAW,SAAS;gBACxE,cAAc,eAAe;gBAC7B,UAAU,cAAc,CAAC,cAAc,EAAE,aAAa,QAAQ,CAAC,GAAG;gBAClE;QACJ;QAEA,IAAI,aAAa;YACf,0BAA0B;YAC1B,MAAM,SAAS,YAAY,CAAC,OAA4B;YAExD,MAAM,oBAAoB,gIAAA,CAAA,UAAE,CAAC,OAAO,CAAC;YACrC,kBAAkB,GAAG,CAAC,QAAQ,KAAK,EAAE;YAErC,kCAAkC;YAClC,MAAM,WAAW,gIAAA,CAAA,UAAE,CAAC,OAAO,CAAC;YAC5B,MAAM,OAAO,SAAS,GAAG,CAAC,SAAS,CAAC,OAAiC;YAErE,IAAI,MAAM;gBACR,MAAM,iBAAiB,gIAAA,CAAA,UAAE,CAAC,OAAO,CAAC,CAAC;;;QAGnC,CAAC;gBACD,eAAe,GAAG,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE;YACrC;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS,CAAC,mBAAmB,EAAE,OAAO,QAAQ,CAAC;gBAC/C,QAAQ;gBACR,YAAY,KAAK,gBAAgB,GAAG;YACtC;QACF,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;YACX;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA,qCAAqC;AACrC,eAAe,yBAAyB,MAAc;IACpD,IAAI,CAAC,aAAa,CAAC,kBAAkB;QACnC,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,WAAW,MAAM,MAAM,CAAC,4BAA4B,EAAE,UAAU,cAAc,CAAC,EAAE;QACrF,QAAQ;QACR,SAAS;YACP,gBAAgB;QAClB;QACA,MAAM,KAAK,SAAS,CAAC;YACnB,SAAS;YACT,SAAS;QACX;IACF;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,UAAU,EAAE;IAC9D;IAEA,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,OAAO,KAAK,MAAM;AACpB","debugId":null}}]
}