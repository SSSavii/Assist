{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/init-database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\n\nconst dbPath = path.join(process.cwd(), 'main.db');\nconst db = new Database(dbPath, { verbose: console.log });\n\n// Создание таблиц (если ещё не созданы)\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    tg_id INTEGER NOT NULL UNIQUE,\n    username TEXT,\n    first_name TEXT NOT NULL,\n    last_name TEXT,\n    referred_by_id INTEGER,\n    balance_crystals INTEGER NOT NULL DEFAULT 400,\n    last_tap_date TEXT,\n    daily_taps_count INTEGER NOT NULL DEFAULT 0,\n    bio TEXT,\n    awards TEXT,\n    cases_to_open INTEGER NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_login_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    subscribed INTEGER DEFAULT 0,\n    voted INTEGER DEFAULT 0,\n    FOREIGN KEY (referred_by_id) REFERENCES users(id)\n  )\n`);\n// Явно добавляем колонки, если их нет\ntry {\n  db.exec(\"ALTER TABLE users ADD COLUMN subscribed INTEGER DEFAULT 0;\");\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n} catch (e) {\n  // Колонка уже существует — это нормально\n}\n\ntry {\n  db.exec(\"ALTER TABLE users ADD COLUMN voted INTEGER DEFAULT 0;\");\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n} catch (e) {\n  // Колонка уже существует — это нормально\n}\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Lots (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    photoUrl TEXT,\n    city TEXT,\n    age INTEGER,\n    start_price INTEGER NOT NULL DEFAULT 0,\n    min_bid_step INTEGER NOT NULL DEFAULT 100,\n    current_price INTEGER NOT NULL DEFAULT 0,\n    status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('DRAFT', 'ACTIVE', 'FINISHED', 'CANCELLED')),\n    expires_at TEXT NOT NULL,\n    winner_id INTEGER,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (winner_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS Bids (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    lot_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    amount INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (lot_id) REFERENCES Lots(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS case_winnings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    prize_name TEXT NOT NULL,\n    won_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n  )\n`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY,\n    task_key TEXT NOT NULL UNIQUE,\n    title TEXT NOT NULL,\n    reward_crystals INTEGER DEFAULT 0\n  )\n`);\n\n// Вставка задач (если ещё не вставлены)\nconst insertTask = db.prepare(`\n  INSERT OR IGNORE INTO tasks (id, task_key, title, reward_crystals)\n  VALUES (@id, @task_key, @title, @reward_crystals)\n`);\n\ndb.transaction(() => {\n  insertTask.run({ id: 1, task_key: 'subscribe_channel', title: 'Подпишись на Ассист+', reward_crystals: 100 });\n  insertTask.run({ id: 2, task_key: 'vote_poll', title: 'Отдай голос на улучшение канала', reward_crystals: 500 });\n  insertTask.run({ id: 3, task_key: 'invite_friend_assistant', title: 'Пригласи друга, который хочет стать бизнес-ассистентом', reward_crystals: 500 });\n})();\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS user_tasks (\n    user_id INTEGER NOT NULL,\n    task_id INTEGER NOT NULL,\n    status TEXT NOT NULL DEFAULT 'completed',\n    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, task_id),\n    FOREIGN KEY(user_id) REFERENCES users(id),\n    FOREIGN KEY(task_id) REFERENCES tasks(id)\n  )\n`);\n\nconsole.log('✅ Все таблицы базы данных успешно инициализированы');\n\nexport default db;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACxC,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,QAAQ;IAAE,SAAS,QAAQ,GAAG;AAAC;AAEvD,wCAAwC;AACxC,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;AAoBT,CAAC;AACD,sCAAsC;AACtC,IAAI;IACF,GAAG,IAAI,CAAC;AACV,6DAA6D;AAC7D,EAAE,OAAO,GAAG;AACV,yCAAyC;AAC3C;AAEA,IAAI;IACF,GAAG,IAAI,CAAC;AACV,6DAA6D;AAC7D,EAAE,OAAO,GAAG;AACV,yCAAyC;AAC3C;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;AAkBT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;;AAQT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;;;AAOT,CAAC;AAED,wCAAwC;AACxC,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC;;;AAG/B,CAAC;AAED,GAAG,WAAW,CAAC;IACb,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAqB,OAAO;QAAwB,iBAAiB;IAAI;IAC3G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAAa,OAAO;QAAmC,iBAAiB;IAAI;IAC9G,WAAW,GAAG,CAAC;QAAE,IAAI;QAAG,UAAU;QAA2B,OAAO;QAA0D,iBAAiB;IAAI;AACrJ;AAEA,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUT,CAAC;AAED,QAAQ,GAAG,CAAC;uCAEG","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/telegram-auth.ts"],"sourcesContent":["import { createHmac } from 'crypto';\nimport { URLSearchParams } from 'url';\n\nexport function validateTelegramHash(initData: string, botToken: string): boolean {\n  try {\n    const params = new URLSearchParams(initData);\n    const hash = params.get('hash');\n    if (!hash) return false;\n    \n    params.delete('hash');\n    const dataCheckArr: string[] = [];\n    const sortedKeys = Array.from(params.keys()).sort();\n    \n    sortedKeys.forEach(key => dataCheckArr.push(`${key}=${params.get(key)}`));\n    const dataCheckString = dataCheckArr.join('\\n');\n    \n    const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest();\n    const ownHash = createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n    \n    return ownHash === hash;\n  } catch (error) {\n    console.error(\"Error during hash validation:\", error);\n    return false;\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,qBAAqB,QAAgB,EAAE,QAAgB;IACrE,IAAI;QACF,MAAM,SAAS,IAAI,+FAAA,CAAA,kBAAe,CAAC;QACnC,MAAM,OAAO,OAAO,GAAG,CAAC;QACxB,IAAI,CAAC,MAAM,OAAO;QAElB,OAAO,MAAM,CAAC;QACd,MAAM,eAAyB,EAAE;QACjC,MAAM,aAAa,MAAM,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI;QAEjD,WAAW,OAAO,CAAC,CAAA,MAAO,aAAa,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,OAAO,GAAG,CAAC,MAAM;QACvE,MAAM,kBAAkB,aAAa,IAAI,CAAC;QAE1C,MAAM,YAAY,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,cAAc,MAAM,CAAC,UAAU,MAAM;QAC5E,MAAM,UAAU,CAAA,GAAA,qGAAA,CAAA,aAAU,AAAD,EAAE,UAAU,WAAW,MAAM,CAAC,iBAAiB,MAAM,CAAC;QAE/E,OAAO,YAAY;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/user/winnings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport db from '@/lib/init-database';\nimport { validateTelegramHash } from '@/lib/telegram-auth';\n\nexport async function POST(req: NextRequest) {\n  console.log(`\\n--- [${new Date().toISOString()}] Received /api/user/winnings request ---`);\n  \n  try {\n    const { initData } = await req.json();\n    \n    if (!initData) {\n      console.error('[ERROR] initData is missing from request body');\n      return NextResponse.json({ error: 'initData is required' }, { status: 400 });\n    }\n\n    const botToken = process.env.BOT_TOKEN;\n    if (!botToken) {\n      console.error('[ERROR] BOT_TOKEN is not defined in environment variables');\n      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });\n    }\n\n    const isValid = validateTelegramHash(initData, botToken);\n    if (!isValid) {\n      console.warn('[WARN] Hash validation failed. Request rejected.');\n      return NextResponse.json({ error: 'Invalid data: hash validation failed' }, { status: 403 });\n    }\n\n    const params = new URLSearchParams(initData);\n    const userData = JSON.parse(params.get('user') || '{}');\n    const tgUserId = userData.id;\n\n    if (!tgUserId) {\n      console.error('[ERROR] User ID is missing in initData');\n      return NextResponse.json({ error: 'Invalid user data in initData' }, { status: 400 });\n    }\n\n    console.log(`[INFO] Fetching winnings for user with tg_id: ${tgUserId}`);\n\n    const userStmt = db.prepare('SELECT id FROM users WHERE tg_id = ?');\n    const user = userStmt.get(tgUserId) as { id: number } | undefined;\n\n    if (!user) {\n      console.error(`[ERROR] User with tg_id ${tgUserId} not found in database`);\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    const winningsStmt = db.prepare(`\n      SELECT \n        cw.id,\n        cw.prize_name,\n        cw.won_at,\n        CASE \n          WHEN cw.prize_name IN ('Онлайн-мини-разбор с Иваном', 'Приоритетное место в мини-разборе у Ивана', \n                                'Ответ Ивана голосом на ваш вопрос', 'Звонок 1 на 1 с Антоном Орешкиным') \n          THEN 'rare' \n          ELSE 'common' \n        END as prize_type\n      FROM case_winnings cw\n      WHERE cw.user_id = ?\n      ORDER BY cw.won_at DESC\n      LIMIT 50\n    `);\n\n    const winnings = winningsStmt.all(user.id) as Array<{\n      id: number;\n      prize_name: string;\n      won_at: string;\n      prize_type: 'rare' | 'common';\n    }>;\n\n    console.log(`[SUCCESS] Found ${winnings.length} winnings for user ${user.id}`);\n    return NextResponse.json(winnings);\n\n  } catch (error) {\n    console.error('--- [FATAL ERROR] API /api/user/winnings crashed: ---', error);\n    return NextResponse.json(\n      { error: 'Internal Server Error', details: (error as Error).message }, \n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,IAAI,OAAO,WAAW,GAAG,yCAAyC,CAAC;IAEzF,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,IAAI,CAAC,UAAU;YACb,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,MAAM,WAAW,QAAQ,GAAG,CAAC,SAAS;QACtC,IAAI,CAAC,UAAU;YACb,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,MAAM,UAAU,CAAA,GAAA,gIAAA,CAAA,uBAAoB,AAAD,EAAE,UAAU;QAC/C,IAAI,CAAC,SAAS;YACZ,QAAQ,IAAI,CAAC;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuC,GAAG;gBAAE,QAAQ;YAAI;QAC5F;QAEA,MAAM,SAAS,IAAI,gBAAgB;QACnC,MAAM,WAAW,KAAK,KAAK,CAAC,OAAO,GAAG,CAAC,WAAW;QAClD,MAAM,WAAW,SAAS,EAAE;QAE5B,IAAI,CAAC,UAAU;YACb,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACrF;QAEA,QAAQ,GAAG,CAAC,CAAC,8CAA8C,EAAE,UAAU;QAEvE,MAAM,WAAW,gIAAA,CAAA,UAAE,CAAC,OAAO,CAAC;QAC5B,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,QAAQ,KAAK,CAAC,CAAC,wBAAwB,EAAE,SAAS,sBAAsB,CAAC;YACzE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,eAAe,gIAAA,CAAA,UAAE,CAAC,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;IAejC,CAAC;QAED,MAAM,WAAW,aAAa,GAAG,CAAC,KAAK,EAAE;QAOzC,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,SAAS,MAAM,CAAC,mBAAmB,EAAE,KAAK,EAAE,EAAE;QAC7E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yDAAyD;QACvE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAyB,SAAS,AAAC,MAAgB,OAAO;QAAC,GACpE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}