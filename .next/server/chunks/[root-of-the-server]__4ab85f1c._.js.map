{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/lib/db.ts"],"sourcesContent":["import Database from 'better-sqlite3';\n\nconst db = new Database('./main.db', { verbose: console.log });\n\nprocess.on('exit', () => db.close());\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,KAAK,IAAI,2HAAA,CAAA,UAAQ,CAAC,aAAa;IAAE,SAAS,QAAQ,GAAG;AAAC;AAE5D,QAAQ,EAAE,CAAC,QAAQ,IAAM,GAAG,KAAK;uCAElB","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///Users/georgiiisavich/Desktop/assist_plus/src/app/api/cases/open/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { URLSearchParams } from 'url';\nimport { createHmac } from 'crypto';\nimport db from 'wxqryy/lib/db';\n\nconst PRIZES = [\n    { name: 'Чек-лист', chance: 91, type: 'checklist' },\n    ...Array.from({ length: 9 }, (_, i) => ({\n        name: `Подарок ${i + 1}`,\n        chance: 1,\n        type: 'generic'\n    }))\n];\n\nfunction determinePrize(): { name: string, type: string, amount?: number } {\n    const totalChance = PRIZES.reduce((sum, p) => sum + p.chance, 0);\n    let randomPoint = Math.random() * totalChance;\n\n    for (const prize of PRIZES) {\n        if (randomPoint < prize.chance) {\n            return prize;\n        }\n        randomPoint -= prize.chance;\n    }\n    return PRIZES[0];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validateTelegramHash(initData: string, botToken: string): { isValid: boolean, user?: any } {\n    try {\n        const params = new URLSearchParams(initData);\n        const hash = params.get('hash');\n        if (!hash) return { isValid: false };\n\n        const user = JSON.parse(params.get('user') || '{}');\n        params.delete('hash');\n\n        const dataCheckArr = Array.from(params.entries())\n            .sort(([a], [b]) => a.localeCompare(b))\n            .map(([key, value]) => `${key}=${value}`);\n\n        const dataCheckString = dataCheckArr.join('\\n');\n        const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest();\n        const ownHash = createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n\n        return { isValid: ownHash === hash, user };\n    } catch (error) {\n        console.error(\"Error during hash validation:\", error);\n        return { isValid: false };\n    }\n}\n\n\nexport async function POST(request: NextRequest) {\n    const botToken = process.env.BOT_TOKEN;\n    if (!botToken) {\n        console.error('CRITICAL: BOT_TOKEN is not defined in environment variables.');\n        return NextResponse.json({ error: 'Ошибка конфигурации сервера' }, { status: 500 });\n    }\n\n    try {\n        const { initData } = await request.json();\n        if (!initData) {\n            return NextResponse.json({ error: 'initData is required' }, { status: 400 });\n        }\n\n        const { isValid, user: tgUser } = validateTelegramHash(initData, botToken);\n        if (!isValid || !tgUser?.id) {\n            return NextResponse.json({ error: 'Неверные данные: проверка подлинности не удалась' }, { status: 403 });\n        }\n        \n        const transaction = db.transaction(() => {\n            const userFromDb = db.prepare('SELECT id, cases_to_open FROM users WHERE tg_id = ?').get(tgUser.id) as { id: number; cases_to_open: number } | undefined;\n\n            if (!userFromDb || userFromDb.cases_to_open < 1) {\n                return { error: 'У вас нет доступных кейсов для открытия.', status: 403 };\n            }\n\n            db.prepare('UPDATE users SET cases_to_open = cases_to_open - 1 WHERE id = ?').run(userFromDb.id);\n\n            const wonPrize = determinePrize();\n            if (wonPrize.type === 'crystals' && wonPrize.amount) {\n                db.prepare('UPDATE users SET balance_crystals = balance_crystals + ? WHERE id = ?').run(wonPrize.amount, userFromDb.id);\n            }\n            \n            db.prepare('INSERT INTO case_winnings (user_id, prize_name) VALUES (?, ?)')\n                .run(userFromDb.id, wonPrize.name);\n\n            return { prizeName: wonPrize.name };\n        });\n\n        const result = transaction();\n\n        if (result.error) {\n            return NextResponse.json({ error: result.error }, { status: result.status || 400 });\n        }\n\n        return NextResponse.json(result);\n\n    } catch (error) {\n        console.error(\"Case open error:\", error);\n        const errorMessage = error instanceof Error ? error.message : 'Произошла неизвестная ошибка';\n        return NextResponse.json({ error: errorMessage }, { status: 500 });\n    }\n}"],"names":[],"mappings":"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","debugId":null}}]
}