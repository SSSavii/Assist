/* eslint-disable @typescript-eslint/no-unused-vars */
import { NextRequest, NextResponse } from 'next/server';
import { validateTelegramHash } from '@/lib/telegram-auth';

export async function POST(req: NextRequest) {
  console.log(`\n--- [${new Date().toISOString()}] Received /api/bot/send-prize request ---`);
  
  try {
    const { initData, prizeName, messageType } = await req.json();
    
    if (!initData) {
      console.error('[ERROR] initData is missing from request body');
      return NextResponse.json({ error: 'initData is required' }, { status: 400 });
    }

    const botToken = process.env.BOT_TOKEN;
    if (!botToken) {
      console.error('[ERROR] BOT_TOKEN is not defined in environment variables');
      return NextResponse.json({ error: 'Server configuration error' }, { status: 500 });
    }

    const isValid = validateTelegramHash(initData, botToken);
    if (!isValid) {
      console.warn('[WARN] Hash validation failed. Request rejected.');
      return NextResponse.json({ error: 'Invalid data: hash validation failed' }, { status: 403 });
    }

    const params = new URLSearchParams(initData);
    const userData = JSON.parse(params.get('user') || '{}');
    const tgUserId = userData.id;

    if (!tgUserId) {
      console.error('[ERROR] User ID is missing in initData');
      return NextResponse.json({ error: 'Invalid user data in initData' }, { status: 400 });
    }

    console.log(`[INFO] Sending prize "${prizeName}" to user ${tgUserId} via bot`);

    let messageText = '';
    let fileUrl = '';

    if (messageType === 'checklist') {
      messageText = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prizeName}\n\n–í–∞—à–∏ —á–µ–∫-–ª–∏—Å—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.`;
      // TODO: –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
      fileUrl = 'https://example.com/checklists.pdf'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
    } else if (messageType === 'manual_contact') {
      messageText = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prizeName}\n\n‚ú® –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–∏–∑–∞!`;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
    const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    const response = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: tgUserId,
        text: messageText,
        parse_mode: 'HTML'
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('[ERROR] Failed to send message via Telegram:', errorData);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      if (errorData.description?.includes('bot was blocked') || 
          errorData.description?.includes('user is deactivated') ||
          errorData.description?.includes('chat not found')) {
        return NextResponse.json({ 
          error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!',
          botNotStarted: true 
        }, { status: 400 });
      }
      
      throw new Error('Failed to send Telegram message');
    }

    console.log(`[SUCCESS] Prize message sent successfully to user ${tgUserId}`);
    
    return NextResponse.json({ 
      success: true,
      message: 'Prize sent successfully'
    });

  } catch (error) {
    console.error('--- [FATAL ERROR] API /api/bot/send-prize crashed: ---', error);
    return NextResponse.json(
      { error: (error as Error).message || 'Internal Server Error' }, 
      { status: 500 }
    );
  }
}