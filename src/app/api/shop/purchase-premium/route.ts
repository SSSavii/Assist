// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä–∞ (—á–µ—Ä–µ–∑ fetch)
export async function notifyAdminsAboutPurchase(
  userId: number,
  userName: string,
  userUsername: string,
  itemName: string,
  itemCost: number,
  newBalance: number
) {
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const ADMIN_IDS = process.env.ADMIN_IDS?.split(',').map(id => parseInt(id.trim())) || [];
  
  if (!BOT_TOKEN) {
    console.error('[ERROR] BOT_TOKEN not configured');
    return;
  }

  if (ADMIN_IDS.length === 0) {
    console.warn('[WARN] No admin IDs configured for notifications');
    return;
  }

  const userIdentifier = userUsername ? `@${userUsername}` : `ID: ${userId}`;
  
  const message = `üõç <b>–ù–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê –ü–†–ï–ú–ò–£–ú –¢–û–í–ê–†–ê!</b>\n\n` +
                 `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userName}\n` +
                 `üÜî <b>Telegram:</b> ${userIdentifier}\n` +
                 `üì¶ <b>–¢–æ–≤–∞—Ä:</b> ${itemName}\n` +
                 `üíé <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${itemCost.toLocaleString('ru-RU')} –ê+\n` +
                 `üí∞ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> ${newBalance.toLocaleString('ru-RU')} –ê+\n\n` +
                 `üìû <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–≤–æ–Ω–∞.`;

  const promises = ADMIN_IDS.map(async (adminId) => {
    try {
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: adminId,
          text: message,
          parse_mode: 'HTML',
          disable_web_page_preview: true
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Telegram API error: ${JSON.stringify(errorData)}`);
      }

      console.log(`[INFO] Purchase notification sent to admin ${adminId}`);
    } catch (error) {
      console.error(`[ERROR] Failed to send purchase notification to admin ${adminId}:`, error);
    }
  });

  await Promise.allSettled(promises);
}