/* eslint-disable @typescript-eslint/no-unused-vars */
'use client';

import { useState, useEffect, useRef } from 'react';
import Image from 'next/image';
import HorizontalTextSlotMachine from '@/app/components/TextSlotMachine';

const GlobalStyles = () => (
  <>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <style jsx global>{`
      * {
        box-sizing: border-box;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      
      html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow-x: hidden;
      }
      
      @font-face {
        font-family: 'Cera Pro';
        src: url('/fonts/CeraPro-Regular.woff2') format('woff2'),
             url('/fonts/CeraPro-Regular.woff') format('woff');
        font-weight: 400;
        font-style: normal;
        font-display: swap;
      }
      
      @font-face {
        font-family: 'Cera Pro';
        src: url('/fonts/CeraPro-Light.woff2') format('woff2'),
             url('/fonts/CeraPro-Light.woff') format('woff');
        font-weight: 300;
        font-style: normal;
        font-display: swap;
      }
      
      @font-face {
        font-family: 'Cera Pro';
        src: url('/fonts/CeraPro-Medium.woff2') format('woff2'),
             url('/fonts/CeraPro-Medium.woff') format('woff');
        font-weight: 500;
        font-style: normal;
        font-display: swap;
      }
      
      @font-face {
        font-family: 'Cera Pro';
        src: url('/fonts/CeraPro-Bold.woff2') format('woff2'),
             url('/fonts/CeraPro-Bold.woff') format('woff');
        font-weight: 700;
        font-style: normal;
        font-display: swap;
      }
      
      body {
        font-family: 'Cera Pro', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
      }
    `}</style>
  </>
);

type Prize = {
  name: string;
  type: 'rare' | 'common';
  canWin: boolean;
  deliveryType: 'instant' | 'bot_message' | 'manual';
};

const ALL_PRIZES: Prize[] = [
  { name: '–û–Ω–ª–∞–π–Ω-–º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä —Å –ò–≤–∞–Ω–æ–º', type: 'rare', canWin: true, deliveryType: 'manual' },
  { name: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä–µ —É –ò–≤–∞–Ω–∞', type: 'rare', canWin: true, deliveryType: 'manual' },
  { name: '–£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∑–∞–≤—Ç—Ä–∞–∫–∞ —Å –ò–≤–∞–Ω–æ–º', type: 'rare', canWin: false, deliveryType: 'manual' },
  { name: '–û—Ç–≤–µ—Ç –ò–≤–∞–Ω–∞ –≥–æ–ª–æ—Å–æ–º –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å', type: 'rare', canWin: true, deliveryType: 'manual' },
  { name: '–ó–≤–æ–Ω–æ–∫ 1 –Ω–∞ 1 —Å –ê–Ω—Ç–æ–Ω–æ–º –û—Ä–µ—à–∫–∏–Ω—ã–º', type: 'rare', canWin: true, deliveryType: 'manual' },
  { name: '3 —á–µ–∫-–ª–∏—Å—Ç–∞', type: 'common', canWin: true, deliveryType: 'bot_message' },
  { name: '–£—á–∞—Å—Ç–∏–µ –≤ —Å–æ–∑–≤–æ–Ω–µ –ê–Ω—Ç–æ–Ω–∞ –û—Ä–µ—à–∫–∏–Ω–∞ —Å –ë–ê', type: 'common', canWin: true, deliveryType: 'manual' },
  { name: '1000 A+', type: 'common', canWin: true, deliveryType: 'instant' },
  { name: '–†–∞–∑–±–æ—Ä –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ', type: 'common', canWin: true, deliveryType: 'manual' }
];

interface UserProfile {
  id: number;
  tg_id: number;
  balance_crystals: number;
  cases_to_open: number;
  bot_started?: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
}

interface DailyLimit {
  remaining: number;
  used: number;
  maxLimit: number;
}

const CASE_COST = 500;
const PREMIUM_ITEM_COST = 10000;

export default function ShopPage() {
  const [user, setUser] = useState<UserProfile | null>(null);
  const [dailyLimit, setDailyLimit] = useState<DailyLimit | null>(null);
  const [isSpinning, setIsSpinning] = useState(false);
  const [winningPrize, setWinningPrize] = useState<Prize | null>(null);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [spinKey, setSpinKey] = useState(0);
  const [isPurchasing, setIsPurchasing] = useState(false);
  const hasSpunRef = useRef(false);
  const isProcessingPrizeRef = useRef(false);

  useEffect(() => {
    const tg = window.Telegram?.WebApp;
    if (!tg) {
      setError("Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram.");
      setIsLoading(false);
      return;
    }

    tg.ready();

    Promise.all([
      fetch('/api/auth', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ initData: tg.initData }),
      }).then(response => {
        if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return response.json();
      }),
      
      fetch('/api/user/daily-limit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          initData: tg.initData,
          action: 'check'
        }),
      }).then(response => {
        if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏–º–∏—Ç—ã');
        return response.json();
      })
    ])
    .then(([userData, limitData]) => {
      if (userData && userData.error) {
        throw new Error(userData.error);
      }
      setUser(userData);
      setDailyLimit(limitData);
    })
    .catch(err => {
      console.error("Shop page fetch error:", err);
      setError(err.message);
    })
    .finally(() => {
      setIsLoading(false);
    });
  }, []);

  const getRandomPrize = (): Prize => {
    const random = Math.random();
    const availablePrizes = random < 0.2 
      ? ALL_PRIZES.filter(p => p.type === 'rare' && p.canWin)
      : ALL_PRIZES.filter(p => p.type === 'common' && p.canWin);

    return availablePrizes[Math.floor(Math.random() * availablePrizes.length)];
  };

  const handlePrizeDelivery = async (prize: Prize) => {
    const tg = window.Telegram?.WebApp;
    if (!tg || isProcessingPrizeRef.current) return;

    isProcessingPrizeRef.current = true;

    try {
      if (prize.deliveryType === 'instant') {
        const response = await fetch('/api/user/award-prize', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            initData: tg.initData,
            prizeName: prize.name,
            prizeType: 'instant'
          }),
        });

        if (response.ok) {
          const data = await response.json();
          if (prize.name === '1000 A+') {
            setUser(prev => prev ? {
              ...prev,
              balance_crystals: data.newBalance || (prev.balance_crystals + 1000)
            } : null);
            
            tg.showAlert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prize.name}\n\n‚ú® –ü–ª—é—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!`);
          }
        }
      } else if (prize.deliveryType === 'bot_message') {
        await fetch('/api/bot/send-prize', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            initData: tg.initData,
            prizeName: prize.name,
            messageType: 'checklist'
          }),
        });
        
        tg.showAlert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prize.name}\n\nüì¨ –ü—Ä–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –±–æ—Ç!`);
      } else if (prize.deliveryType === 'manual') {
        await fetch('/api/bot/send-prize', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            initData: tg.initData,
            prizeName: prize.name,
            messageType: 'manual_contact'
          }),
        });
        
        tg.showAlert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prize.name}\n\nüìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!`);
      }

      await fetch('/api/user/save-winning', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          initData: tg.initData,
          prizeName: prize.name,
          prizeType: prize.type,
          deliveryType: prize.deliveryType
        }),
      });

    } catch (error) {
      console.error('Error delivering prize:', error);
      tg.showAlert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    } finally {
      isProcessingPrizeRef.current = false;
    }
  };

  const handleSpin = async () => {
    const tg = window.Telegram?.WebApp;

    if (isSpinning || hasSpunRef.current || !user) return;

    if (user.balance_crystals < CASE_COST) {
      tg?.showAlert(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–ª—é—Å–æ–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${CASE_COST} –ê+`);
      return;
    }

    if (dailyLimit && dailyLimit.remaining <= 0) {
      tg?.showAlert(`–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏–π –∫–µ–π—Å–æ–≤!\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è: 0/${dailyLimit.maxLimit}`);
      return;
    }

    setIsSpinning(true);
    setError('');
    setWinningPrize(null);
    hasSpunRef.current = true;
    isProcessingPrizeRef.current = false;

    try {
      tg?.HapticFeedback.impactOccurred('light');

      const spendResponse = await fetch('/api/user/spend-crystals', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          initData: tg?.initData,
          amount: CASE_COST
        }),
      });

      if (!spendResponse.ok) {
        const errorData = await spendResponse.json();
        throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –ø–ª—é—Å—ã');
      }

      const spendData = await spendResponse.json();

      const limitResponse = await fetch('/api/user/daily-limit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          initData: tg?.initData,
          action: 'use'
        }),
      });

      if (!limitResponse.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É');
      }

      const limitData = await limitResponse.json();
      
      setUser(prev => prev ? { 
        ...prev, 
        balance_crystals: spendData.newBalance
      } : null);

      setDailyLimit({
        remaining: limitData.remaining,
        used: limitData.used,
        maxLimit: dailyLimit?.maxLimit || 5
      });

      await new Promise(resolve => setTimeout(resolve, 100));
      
      const prize = getRandomPrize();
      setSpinKey(prev => prev + 1);
      setWinningPrize(prize);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      setIsSpinning(false);
      hasSpunRef.current = false;
      tg?.HapticFeedback.notificationOccurred('error');
      tg?.showAlert(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const handleSpinEnd = () => {
    if (winningPrize && !isProcessingPrizeRef.current) {
      window.Telegram?.WebApp?.HapticFeedback.notificationOccurred('success');
      handlePrizeDelivery(winningPrize);
    }
    
    setTimeout(() => {
      setIsSpinning(false);
      hasSpunRef.current = false;
    }, 500);
  };

  const handleOpenBot = () => {
    const tg = window.Telegram?.WebApp;
    if (tg?.HapticFeedback) {
      tg.HapticFeedback.impactOccurred('light');
    }
    const botUsername = 'my_auction_admin_bot';
    tg?.openTelegramLink(`https://t.me/${botUsername}`);
  };

  const handlePurchasePremiumItem = async () => {
    const tg = window.Telegram?.WebApp;
    
    if (isPurchasing || !user) return;

    if (user.balance_crystals < PREMIUM_ITEM_COST) {
      tg?.showAlert(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–ª—é—Å–æ–≤!\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${PREMIUM_ITEM_COST.toLocaleString('ru-RU')} –ê+`);
      return;
    }

    setIsPurchasing(true);

    try {
      tg?.HapticFeedback.impactOccurred('medium');

      const response = await fetch('/api/shop/purchase-premium', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          initData: tg?.initData,
          itemName: '–°–æ–∑–≤–æ–Ω —Å –∫—É–º–∏—Ä–æ–º',
          itemCost: PREMIUM_ITEM_COST
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É');
      }

      const data = await response.json();

      setUser(prev => prev ? {
        ...prev,
        balance_crystals: data.newBalance
      } : null);

      tg?.HapticFeedback.notificationOccurred('success');
      tg?.showAlert('üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n\nüìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–≤–æ–Ω–∞.');

    } catch (err) {
      console.error('Purchase error:', err);
      tg?.HapticFeedback.notificationOccurred('error');
      tg?.showAlert(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsPurchasing(false);
    }
  };

  if (isLoading) {
    return <div className="loading-container">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  const isSpinDisabled = isSpinning || 
                         !user || 
                         (user?.balance_crystals ?? 0) < CASE_COST || 
                         (dailyLimit?.remaining ?? 0) <= 0;

  const isBuyDisabled = isPurchasing || !user || (user?.balance_crystals ?? 0) < PREMIUM_ITEM_COST;

  return (
    <>
      <GlobalStyles />
      <div className="shop-wrapper">
        <main className="shop-container">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ */}
          <div className="shop-header">
            <h1 className="shop-title">–ú–∞–≥–∞–∑–∏–Ω</h1>
            <p className="shop-subtitle">
              –û–±–º–µ–Ω–∏–≤–∞–π —Å–≤–æ–∏ –ø–ª—é—Å—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã!
            </p>
          </div>
          
          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ—Ç–µ */}
          {!user?.bot_started && (
            <button onClick={handleOpenBot} className="bot-warning">
              <p className="warning-title">–í–Ω–∏–º–∞–Ω–∏–µ!</p>
              <p className="warning-text">–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤</p>
            </button>
          )}

          {/* –ë–ª–æ–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º */}
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-value">{dailyLimit?.remaining || 0}/{dailyLimit?.maxLimit || 5}</div>
              <div className="stat-label">–û—Å—Ç–∞–ª–æ—Å—å<br/>–æ—Ç–∫—Ä—ã—Ç–∏–π</div>
            </div>
            
            <div className="stat-card">
              <div className="stat-value">{user?.balance_crystals?.toLocaleString('ru-RU') || 0}</div>
              <div className="stat-label">–¢–µ–∫—É—â–∏–π<br/>–±–∞–ª–∞–Ω—Å</div>
            </div>
          </div>

          {/* –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ */}
          <div className="slot-section">
            <div className="slot-machine">
              <HorizontalTextSlotMachine
                key={spinKey}
                spinId={spinKey}
                prizes={ALL_PRIZES.map(p => ({ name: p.name, icon: '' }))}
                winningPrize={winningPrize ? { name: winningPrize.name, icon: '' } : null}
                onSpinEnd={handleSpinEnd}
              />
            </div>
            
            <button 
              onClick={handleSpin}
              disabled={isSpinDisabled}
              className="spin-button"
            >
              {isSpinning ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : `–ö—Ä—É—Ç–∏—Ç—å`}
            </button>
            
            <div className="spin-cost">
              –ö—Ä—É—Ç–∏—Ç—å —Å—Ç–æ–∏—Ç {CASE_COST} –ê+
            </div>
          </div>

          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–≤–∞—Ä—ã */}
          <div className="products-container">
            {/* –ü—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä—ã */}
            <div className="premium-section">
              <h2 className="premium-title">–ü—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä</h2>
              
              {/* –¢–æ–≤–∞—Ä */}
              <div className="product-item">
                {/* –¢–µ–∫—Å—Ç */}
                <div className="product-text">
                  <div className="product-name">–°–æ–∑–≤–æ–Ω —Å –∫—É–º–∏—Ä–æ–º</div>
                  <div className="product-description">30 –º–∏–Ω—É—Ç –ª–∏—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è</div>
                </div>
                
                {/* –ö—É–ø–∏—Ç—å */}
                <div className="purchase-section">
                  <button 
                    onClick={handlePurchasePremiumItem}
                    disabled={isBuyDisabled}
                    className="buy-button"
                  >
                    {isPurchasing ? '–ü–æ–∫—É–ø–∫–∞...' : '–ö—É–ø–∏—Ç—å'}
                  </button>
                  
                  {/* + –æ—á–∫–∏ */}
                  <div className="price-section">
                    <span className="price-value">{PREMIUM_ITEM_COST.toLocaleString('ru-RU')}</span>
                    <div className="crystal-icon">
                      <Image 
                        src="/images/322.png" 
                        alt="Crystal" 
                        width={25} 
                        height={25}
                        style={{ 
                          filter: 'drop-shadow(0px 2px 6px rgba(0, 0, 0, 0.25))'
                        }}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {error && (
            <div className="error-message">
              <p>{error}</p>
            </div>
          )}
        </main>

        <style jsx>{`
          .shop-wrapper {
            position: relative;
            min-height: 100vh;
            min-height: -webkit-fill-available;
            background-color: #FFFFFF;
            width: 100%;
            max-width: 100vw;
            overflow-x: hidden;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
            padding-bottom: 80px;
          }

          .shop-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 24px 16px 100px;
            gap: 16px;
            width: 100%;
            min-height: 100vh;
            box-sizing: border-box;
          }

          .shop-header {
            width: 100%;
            max-width: 343px;
            text-align: center;
            margin-bottom: 8px;
          }

          .shop-title {
            margin: 0 0 8px 0;
            font-family: 'Cera Pro', sans-serif;
            font-style: normal;
            font-weight: 700;
            font-size: 28px;
            line-height: 110%;
            color: #000000;
          }

          .shop-subtitle {
            margin: 0;
            font-family: 'Cera Pro', sans-serif;
            font-style: normal;
            font-weight: 400;
            font-size: 16px;
            line-height: 120%;
            color: #666666;
          }

          .bot-warning {
            width: 100%;
            max-width: 343px;
            background: linear-gradient(243.66deg, #F34444 10.36%, #D72525 86.45%);
            border: 2px solid #D72525;
            color: white;
            padding: 16px;
            border-radius: 16px;
            cursor: pointer;
            transition: opacity 0.2s;
            border: none;
          }

          .bot-warning:active {
            opacity: 0.9;
          }

          .warning-title {
            margin: 0 0 4px 0;
            font-family: 'Cera Pro', sans-serif;
            font-weight: 700;
            font-size: 16px;
          }

          .warning-text {
            margin: 0;
            font-family: 'Cera Pro', sans-serif;
            font-weight: 400;
            font-size: 14px;
            text-decoration: underline;
          }

          .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            width: 100%;
            max-width: 343px;
          }

          .stat-card {
            background: #F1F1F1;
            border-radius: 16px;
            padding: 20px;
            text-align: center;
          }

          .stat-value {
            font-family: 'Cera Pro', sans-serif;
            font-weight: 700;
            font-size: 32px;
            line-height: 100%;
            color: #EA0000;
            margin-bottom: 8px;
          }

          .stat-label {
            font-family: 'Cera Pro', sans-serif;
            font-weight: 400;
            font-size: 14px;
            line-height: 110%;
            color: #000000;
          }

          .slot-section {
            width: 100%;
            max-width: 343px;
            background: #F1F1F1;
            border-radius: 16px;
            padding: 16px;
          }

          .slot-machine {
            height: 256px;
            margin-bottom: 16px;
          }

          .spin-button {
            width: 100%;
            height: 56px;
            background: linear-gradient(243.66deg, #F34444 10.36%, #D72525 86.45%);
            color: white;
            font-family: 'Cera Pro', sans-serif;
            font-weight: 700;
            font-size: 18px;
            border: none;
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.1s;
            box-shadow: 0 4px 0 0 rgba(220, 38, 38, 0.6);
            margin-bottom: 8px;
          }

          .spin-button:active:not(:disabled) {
            transform: translateY(2px);
            box-shadow: 0 2px 0 0 rgba(220, 38, 38, 0.6);
          }

          .spin-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
          }

          .spin-cost {
            font-family: 'Cera Pro', sans-serif;
            font-weight: 500;
            font-size: 14px;
            text-align: center;
            color: #EA0000;
          }

          /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–≤–∞—Ä—ã */
          .products-container {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            padding: 0px;
            gap: 10px;
            width: 100%;
            max-width: 343px;
            flex: none;
            order: 5;
            align-self: stretch;
            flex-grow: 0;
          }

          /* –ü—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä—ã */
          .premium-section {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            padding: 24px 16px;
            gap: 16px;
            width: 100%;
            max-width: 100%;  /* –ò–∑–º–µ–Ω–µ–Ω–æ —Å 343px */
            background: #F1F1F1;
            border-radius: 16px;
            flex: none;
            order: 0;
            align-self: stretch;
            flex-grow: 0;
            box-sizing: border-box;
          }

          .premium-title {
            margin: 0;
            width: 100%;
            font-family: 'Cera Pro', sans-serif;
            font-style: normal;
            font-weight: 500;
            font-size: 24px;
            line-height: 100%;
            leading-trim: both;
            text-edge: cap;
            letter-spacing: -0.03em;
            color: #000000;
            flex: none;
            order: 0;
            flex-grow: 0;
          }

          .product-item {
            display: flex;
            flex-direction: row;
            align-items: flex-start;
            padding: 4px 0px;
            gap: 16px;
            width: 100%;
            flex: none;
            order: 1;
            align-self: stretch;
            flex-grow: 0;
          }

          .product-text {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            padding: 0px;
            gap: 4px;
            flex: 1;
            order: 0;
            flex-grow: 1;
          }

          .product-name {
            font-family: 'Cera Pro', sans-serif;
            font-style: normal;
            font-weight: 500;
            font-size: 16px;
            line-height: 100%;
            letter-spacing: -0.05em;
            color: #000000;
            flex: none;
            order: 0;
            align-self: stretch;
            flex-grow: 0;
          }

          .product-description {
            font-family: 'Cera Pro', sans-serif;
            font-style: normal;
            font-weight: 300;
            font-size: 16px;
            line-height: 110%;
            letter-spacing: -0.02em;
            color: #000000;
            flex: none;
            order: 1;
            align-self: stretch;
            flex-grow: 0;
          }

          .purchase-section {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            padding: 0px;
            gap: 8px;
            flex: none;
            order: 1;
            flex-grow: 0;
          }

          .buy-button {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 8px 32px;
            gap: 10px;
            background: linear-gradient(243.66deg, #F34444 10.36%, #D72525 86.45%);
            border-radius: 30px;
            flex: none;
            order: 0;
            align-self: stretch;
            flex-grow: 0;
            border: none;
            cursor: pointer;
            transition: opacity 0.2s;
            font-family: 'Cera Pro', sans-serif;
            font-style: normal;
            font-weight: 500;
            font-size: 16px;
            line-height: 100%;
            text-align: center;
            letter-spacing: -0.05em;
            color: #FFFFFF;
          }

          .buy-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
          }

          .buy-button:active:not(:disabled) {
            opacity: 0.9;
          }

          .price-section {
            display: flex;
            flex-direction: row;
            align-items: center;
            padding: 0px;
            gap: 10px;
            flex: none;
            order: 1;
            flex-grow: 0;
          }

          .price-value {
            font-family: 'Cera Pro', sans-serif;
            font-style: normal;
            font-weight: 500;
            font-size: 20px;
            line-height: 100%;
            display: flex;
            align-items: center;
            text-align: center;
            letter-spacing: -0.03em;
            color: #000000;
            flex: none;
            order: 0;
            flex-grow: 0;
          }

          .crystal-icon {
            width: 25px;
            height: 25px;
            flex: none;
            order: 1;
            flex-grow: 0;
            display: flex;
            align-items: center;
            justify-content: center;
          }

          .error-message {
            width: 100%;
            max-width: 343px;
            background: #FEE2E2;
            border-left: 4px solid #DC2626;
            color: #991B1B;
            padding: 16px;
            border-radius: 8px;
          }

          .error-message p {
            margin: 0;
            font-family: 'Cera Pro', sans-serif;
            font-size: 14px;
          }

          .loading-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #FFFFFF;
            font-family: 'Cera Pro', sans-serif;
            color: #666666;
          }

          @media (max-width: 375px) {
            .shop-title {
              font-size: 24px;
            }

            .premium-title {
              font-size: 20px;
            }
          }

          @supports (-webkit-touch-callout: none) {
            .shop-wrapper {
              min-height: -webkit-fill-available;
            }
          }
        `}</style>
      </div>
    </>
  );
}