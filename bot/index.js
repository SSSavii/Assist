/* eslint-disable @typescript-eslint/no-unused-vars */
import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

import TelegramBot from 'node-telegram-bot-api';
import db from '../src/lib/init-database.ts';

const {
  BOT_TOKEN,
  TELEGRAM_ADMIN_IDS,
} = process.env;

if (!BOT_TOKEN || !TELEGRAM_ADMIN_IDS) {
  console.error('FATAL: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. Exiting.');
  process.exit(1);
}

const adminIds = TELEGRAM_ADMIN_IDS.split(',').map(id => parseInt(id.trim(), 10));
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–¥–º–∏–Ω—ã: [${adminIds.join(', ')}].`);

const checkAdmin = (msg) => {
  if (!msg.from || !adminIds.includes(msg.from.id)) {
    return false;
  }
  return true;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –≤—ã–∏–≥—Ä—ã—à–µ
export async function notifyAdminsAboutWinning(userId, userName, userUsername, prizeName, prizeType) {
  try {
    const message = `üéÅ *–ù–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à!*\n\n` +
                   `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${userName}\n` +
                   `üì± *Username:* ${userUsername ? '@' + userUsername : '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
                   `üéØ *–ü—Ä–∏–∑:* ${prizeName}\n` +
                   `üì¶ *–¢–∏–ø:* ${prizeType === 'rare' ? '–†–µ–¥–∫–∏–π' : '–û–±—ã—á–Ω—ã–π'}\n\n` +
                   `üí¨ *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* \`${userId}\``;

    for (const adminId of adminIds) {
      try {
        await bot.sendMessage(adminId, message, { parse_mode: 'Markdown' });
      } catch (error) {
        console.error(`[ADMIN NOTIFY] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É ${adminId}:`, error.message);
      }
    }
  } catch (error) {
    console.error('[ADMIN NOTIFY] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function sendPrizeToUser(userId, prizeName, messageType) {
  try {
    let messageText = '';
    
    if (messageType === 'checklist') {
      messageText = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: *${prizeName}*\n\nüìö –í–∞—à–∏ —á–µ–∫-–ª–∏—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`;
    } else if (messageType === 'manual_contact') {
      messageText = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: *${prizeName}*\n\n‚ú® –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–∏–∑–∞!`;
    }

    await bot.sendMessage(userId, messageText, { parse_mode: 'Markdown' });
    return true;
  } catch (error) {
    console.error(`[SEND PRIZE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    if (error.response?.body?.error_code === 403) {
      return { error: 'bot_not_started' };
    }
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
async function checkAndFinishAuctions() {
  try {
    const now = new Date().toISOString();
    const findExpiredLots = db.prepare(`
      SELECT l.id, l.title, l.winner_id, u.first_name, u.last_name, u.username AS tg_username
      FROM Lots l
      LEFT JOIN users u ON l.winner_id = u.id
      WHERE l.status = 'ACTIVE' AND l.expires_at <= ?
    `);
    const expiredLots = findExpiredLots.all(now);

    if (expiredLots.length > 0) {
      console.log(`[AUCTION CHECKER] –ù–∞–π–¥–µ–Ω–æ ${expiredLots.length} –∏—Å—Ç–µ–∫—à–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.`);
    }

    const updateStmt = db.prepare(`UPDATE Lots SET status = 'FINISHED' WHERE id = ?`);
    const finishTransaction = db.transaction((lots) => {
        for (const lot of lots) {
            updateStmt.run(lot.id);
            let notificationMessage;
            if (lot.winner_id && lot.first_name) {
                const winnerName = `${lot.first_name}${lot.last_name ? ` ${lot.last_name}` : ''}`;
                const winnerUsername = lot.tg_username ? `@${lot.tg_username}` : '–Ω–µ—Ç username';
                notificationMessage = `üéâ *–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n*–õ–æ—Ç:* "${lot.title}" (ID: ${lot.id})\n*–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:* ${winnerName}\n*Telegram:* ${winnerUsername}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º.`;
            } else {
                notificationMessage = `‚åõÔ∏è *–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.*\n\n*–õ–æ—Ç:* "${lot.title}" (ID: ${lot.id})`;
            }
            adminIds.forEach(adminId => {
                bot.sendMessage(adminId, notificationMessage, { parse_mode: 'Markdown' }).catch(err => {
                    console.error(`[AUCTION CHECKER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${adminId} –æ –ª–æ—Ç–µ ${lot.id}:`, err.response?.body || err.message);
                });
            });
        }
    });

    if (expiredLots.length > 0) {
        finishTransaction(expiredLots);
    }

  } catch (error) {
    console.error('[AUCTION CHECKER] –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function checkAndResetMonthlyReferrals() {
  try {
    const now = new Date();
    const currentMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
    
    const checkResetStmt = db.prepare(`
      SELECT id, tg_id, first_name, last_name, username, current_month_referrals, last_referral_reset
      FROM users
      WHERE current_month_referrals > 0 
      AND (last_referral_reset IS NULL OR last_referral_reset < ?)
    `);
    
    const usersToReset = checkResetStmt.all(`${currentMonth}-01`);
    
    if (usersToReset.length > 0) {
      console.log(`[LOTTERY] –°–±—Ä–æ—Å –º–µ—Å—è—á–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è ${usersToReset.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      const resetStmt = db.prepare(`
        UPDATE users 
        SET current_month_referrals = 0, last_referral_reset = ?
        WHERE id = ?
      `);
      
      const resetTransaction = db.transaction((users) => {
        for (const user of users) {
          resetStmt.run(currentMonth, user.id);
        }
      });
      
      resetTransaction(usersToReset);
    }
  } catch (error) {
    console.error('[LOTTERY] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–µ—Å—è—á–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
setInterval(checkAndFinishAuctions, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(checkAndResetMonthlyReferrals, 3600000); // –ö–∞–∂–¥—ã–π —á–∞—Å
console.log('‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã.');

// ===== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====

// –ö–æ–º–∞–Ω–¥–∞ /start - –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || '';
  const firstName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const lastName = msg.from.last_name || '';
  
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const checkUser = db.prepare('SELECT id, bot_started FROM users WHERE tg_id = ?');
    const existingUser = checkUser.get(userId);
    
    if (existingUser) {
      if (!existingUser.bot_started) {
        const updateStmt = db.prepare('UPDATE users SET bot_started = 1 WHERE tg_id = ?');
        updateStmt.run(userId);
        console.log(`[BOT START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
      }
    } else {
      const insertStmt = db.prepare(`
        INSERT INTO users (tg_id, username, first_name, last_name, bot_started)
        VALUES (?, ?, ?, ?, 1)
      `);
      insertStmt.run(userId, username, firstName, lastName);
      console.log(`[BOT START] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
    }
    
    const welcomeText = `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ "–ê—Å—Å–∏—Å—Ç+"!*\n\n` +
                       `–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n` +
                       `üéÅ –í—ã–∏–≥—Ä—ã—à–∞—Ö –≤ —Ä—É–ª–µ—Ç–∫–µ\n` +
                       `üéâ –†–æ–∑—ã–≥—Ä—ã—à–∞—Ö –ø—Ä–∏–∑–æ–≤\n` +
                       `üì¢ –í–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n\n` +
                       `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã!`;
    
    bot.sendMessage(chatId, welcomeText, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('[BOT START] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const isAdmin = checkAdmin(msg);
  
  let helpText = `*üìñ –ü–æ–º–æ—â—å - –ë–æ—Ç "–ê—Å—Å–∏—Å—Ç+"*\n\n` +
                 `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
                 `/start - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞\n` +
                 `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n`;
  
  if (isAdmin) {
    helpText += `\n*üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n` +
                `/admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n` +
                `/lottery - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏\n` +
                `/participants <10|20|30> - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
                `/draw <10|20|30> - –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à`;
  }
  
  bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ /admin - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
bot.onText(/\/admin/, async (msg) => {
  if (!checkAdmin(msg)) {
    bot.sendMessage(msg.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }
  
  const chatId = msg.chat.id;
  
  try {
    const statsStmt = db.prepare(`
      SELECT 
        COUNT(*) as total_users,
        SUM(CASE WHEN bot_started = 1 THEN 1 ELSE 0 END) as active_users,
        SUM(CASE WHEN current_month_referrals >= 10 THEN 1 ELSE 0 END) as lottery_10,
        SUM(CASE WHEN current_month_referrals >= 20 THEN 1 ELSE 0 END) as lottery_20,
        SUM(CASE WHEN current_month_referrals >= 30 THEN 1 ELSE 0 END) as lottery_30
      FROM users
    `);
    
    const stats = statsStmt.get();
    
    const message = `*üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n` +
                   `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
                   `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}\n` +
                   `–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: ${stats.active_users}\n\n` +
                   `üé∞ *–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:*\n` +
                   `10+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.lottery_10} —á–µ–ª.\n` +
                   `20+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.lottery_20} —á–µ–ª.\n` +
                   `30+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.lottery_30} —á–µ–ª.\n\n` +
                   `*–ö–æ–º–∞–Ω–¥—ã:*\n` +
                   `/lottery - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏\n` +
                   `/participants <—É—Ä–æ–≤–µ–Ω—å> - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (10/20/30)\n` +
                   `/draw <—É—Ä–æ–≤–µ–Ω—å> - –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à`;
    
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('[ADMIN] –û—à–∏–±–∫–∞:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /participants - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
bot.onText(/\/participants (\d+)/, async (msg, match) => {
  if (!checkAdmin(msg)) {
    bot.sendMessage(msg.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }
  
  const chatId = msg.chat.id;
  const level = parseInt(match[1]);
  
  if (![10, 20, 30].includes(level)) {
    bot.sendMessage(chatId, '‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10, 20 –∏–ª–∏ 30');
    return;
  }
  
  try {
    const participantsStmt = db.prepare(`
      SELECT tg_id, first_name, last_name, username, current_month_referrals, referral_count_subscribed
      FROM users
      WHERE current_month_referrals >= ?
      ORDER BY current_month_referrals DESC
    `);
    
    const participants = participantsStmt.all(level);
    
    if (participants.length === 0) {
      bot.sendMessage(chatId, `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å ${level}+ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ –ø–æ–∫–∞ –Ω–µ—Ç.`);
      return;
    }
    
    let message = `*üé∞ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (${level}+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤):*\n\n`;
    
    participants.forEach((p, index) => {
      const name = `${p.first_name}${p.last_name ? ' ' + p.last_name : ''}`;
      const username = p.username ? `@${p.username}` : '–Ω–µ—Ç username';
      message += `${index + 1}. ${name} (${username})\n`;
      message += `   –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${p.current_month_referrals} (–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: ${p.referral_count_subscribed})\n\n`;
    });
    
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('[PARTICIPANTS] –û—à–∏–±–∫–∞:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /lottery - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏
bot.onText(/\/lottery/, async (msg) => {
  if (!checkAdmin(msg)) {
    bot.sendMessage(msg.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }
  
  const chatId = msg.chat.id;
  
  const message = `*üé∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏*\n\n` +
                 `–†–æ–∑—ã–≥—Ä—ã—à–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏—Ö:\n` +
                 `‚Ä¢ 10+ –¥—Ä—É–∑–µ–π (1-–π —É—Ä–æ–≤–µ–Ω—å)\n` +
                 `‚Ä¢ 20+ –¥—Ä—É–∑–µ–π (2-–π —É—Ä–æ–≤–µ–Ω—å)\n` +
                 `‚Ä¢ 30+ –¥—Ä—É–∑–µ–π (3-–π —É—Ä–æ–≤–µ–Ω—å)\n\n` +
                 `*–ö–æ–º–∞–Ω–¥—ã:*\n` +
                 `/participants <10|20|30> - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
                 `/draw <10|20|30> - –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à\n` +
                 `/reset_month - –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏`;
  
  bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ /draw - –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à
bot.onText(/\/draw (\d+)/, async (msg, match) => {
  if (!checkAdmin(msg)) {
    bot.sendMessage(msg.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }
  
  const chatId = msg.chat.id;
  const level = parseInt(match[1]);
  
  if (![10, 20, 30].includes(level)) {
    bot.sendMessage(chatId, '‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10, 20 –∏–ª–∏ 30');
    return;
  }
  
  try {
    const participantsStmt = db.prepare(`
      SELECT tg_id, first_name, last_name, username, current_month_referrals
      FROM users
      WHERE current_month_referrals >= ?
    `);
    
    const participants = participantsStmt.all(level);
    
    if (participants.length === 0) {
      bot.sendMessage(chatId, `‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å ${level}+ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏`);
      return;
    }
    
    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const winner = participants[Math.floor(Math.random() * participants.length)];
    const winnerName = `${winner.first_name}${winner.last_name ? ' ' + winner.last_name : ''}`;
    const winnerUsername = winner.username ? `@${winner.username}` : '–Ω–µ—Ç username';
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    const adminMessage = `üéâ *–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n` +
                        `–£—Ä–æ–≤–µ–Ω—å: ${level}+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
                        `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}\n\n` +
                        `üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:*\n` +
                        `${winnerName} (${winnerUsername})\n` +
                        `ID: \`${winner.tg_id}\`\n` +
                        `–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${winner.current_month_referrals}`;
    
    bot.sendMessage(chatId, adminMessage, { parse_mode: 'Markdown' });
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    try {
      await bot.sendMessage(
        winner.tg_id,
        `üéâüéâüéâ *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!* üéâüéâüéâ\n\n` +
        `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ${level}+ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏!\n\n` +
        `–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      bot.sendMessage(chatId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é`);
    }
    
  } catch (error) {
    console.error('[DRAW] –û—à–∏–±–∫–∞:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /reset_month - —Å–±—Ä–æ—Å –º–µ—Å—è—á–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤—Ä—É—á–Ω—É—é
bot.onText(/\/reset_month/, async (msg) => {
  if (!checkAdmin(msg)) {
    bot.sendMessage(msg.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    return;
  }
  
  const chatId = msg.chat.id;
  
  try {
    const now = new Date();
    const currentMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
    
    const resetStmt = db.prepare(`
      UPDATE users 
      SET current_month_referrals = 0, last_referral_reset = ?
      WHERE current_month_referrals > 0
    `);
    
    const result = resetStmt.run(currentMonth);
    
    bot.sendMessage(
      chatId, 
      `‚úÖ –ú–µ—Å—è—á–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è ${result.changes} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('[RESET MONTH] –û—à–∏–±–∫–∞:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–æ–≤');
  }
});

export default bot;