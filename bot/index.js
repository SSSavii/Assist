import { execa } from 'execa';
import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const {
  BOT_TOKEN,
  TELEGRAM_ADMIN_IDS,
  ADMIN_API_SECRET_KEY,
  NEXT_PUBLIC_API_URL = 'http://localhost:3000',
} = process.env;

if (!BOT_TOKEN || !TELEGRAM_ADMIN_IDS || !ADMIN_API_SECRET_KEY) {
  console.error('FATAL: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. Exiting.');
  process.exit(1);
}

const adminIds = TELEGRAM_ADMIN_IDS.split(',').map(id => parseInt(id.trim(), 10));
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const API_BASE_URL = `${NEXT_PUBLIC_API_URL}/api/admin`;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

import db from '../src/lib/init-database.ts';

const UPLOAD_DIR = path.join(__dirname, '..', 'public', 'uploads', 'lots');
if (!fs.existsSync(UPLOAD_DIR)) {
  fs.mkdirSync(UPLOAD_DIR, { recursive: true });
}

console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–¥–º–∏–Ω—ã: [${adminIds.join(', ')}].`);

async function apiCall(endpoint, method = 'POST', body = null) {
  const url = `${API_BASE_URL}${endpoint}`;
  const options = {
    method,
    headers: { 'Content-Type': 'application/json', 'X-Admin-Secret-Key': ADMIN_API_SECRET_KEY },
    body: body ? JSON.stringify(body) : null,
  };
  const response = await fetch(url, options);
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—à–∏–±–∫—É API' }));
    throw new Error(errorData.error || `API –æ—à–∏–±–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${response.status}`);
  }
  return response.json();
}

async function downloadPhoto(file_id, savePath) {
  const fileInfo = await bot.getFile(file_id);
  const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;
  const writer = fs.createWriteStream(savePath);
  const response = await axios({ url: fileUrl, method: 'GET', responseType: 'stream' });
  response.data.pipe(writer);
  return new Promise((resolve, reject) => { writer.on('finish', resolve); writer.on('error', reject); });
}

const checkAdmin = (msg) => {
  if (!msg.from || !adminIds.includes(msg.from.id)) {
    if (msg.from) bot.sendMessage(msg.from.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.");
    return false;
  }
  return true;
};

async function checkAndFinishAuctions() {
  try {
    const now = new Date().toISOString();
    const findExpiredLots = db.prepare(`
      SELECT l.id, l.title, l.winner_id, u.first_name, u.last_name, u.username AS tg_username
      FROM Lots l
      LEFT JOIN users u ON l.winner_id = u.id
      WHERE l.status = 'ACTIVE' AND l.expires_at <= ?
    `);
    const expiredLots = findExpiredLots.all(now);

    if (expiredLots.length > 0) {
      console.log(`[AUCTION CHECKER] –ù–∞–π–¥–µ–Ω–æ ${expiredLots.length} –∏—Å—Ç–µ–∫—à–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.`);
    }

    const updateStmt = db.prepare(`UPDATE Lots SET status = 'FINISHED' WHERE id = ?`);
    const finishTransaction = db.transaction((lots) => {
        for (const lot of lots) {
            updateStmt.run(lot.id);
            let notificationMessage;
            if (lot.winner_id && lot.first_name) {
                const winnerName = `${lot.first_name}${lot.last_name ? ` ${lot.last_name}` : ''}`;
                const winnerUsername = lot.tg_username ? `@${lot.tg_username}` : '–Ω–µ—Ç username';
                notificationMessage = `üéâ *–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n*–õ–æ—Ç:* "${lot.title}" (ID: ${lot.id})\n*–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:* ${winnerName}\n*Telegram:* ${winnerUsername}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º.`;
            } else {
                notificationMessage = `‚åõÔ∏è *–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.*\n\n*–õ–æ—Ç:* "${lot.title}" (ID: ${lot.id})`;
            }
            adminIds.forEach(adminId => {
                bot.sendMessage(adminId, notificationMessage, { parse_mode: 'Markdown' }).catch(err => {
                    console.error(`[AUCTION CHECKER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${adminId} –æ –ª–æ—Ç–µ ${lot.id}:`, err.response?.body || err.message);
                });
            });
        }
    });

    if (expiredLots.length > 0) {
        finishTransaction(expiredLots);
    }

  } catch (error) {
    console.error('[AUCTION CHECKER] –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
  }
}

setInterval(checkAndFinishAuctions, 60000);
console.log('‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞.');

const waitingForPhoto = {};

bot.onText(/\/start|\/help/, (msg) => {
  if (!checkAdmin(msg)) return;
  const helpText = `*üëã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å "–ê—Å—Å–∏—Å—Ç+"*\n\n*–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞ (2 —à–∞–≥–∞):*\n1. \`/addlot <–ù–∞–∑–≤–∞–Ω–∏–µ>;<–¶–µ–Ω–∞>;<–ß–∞—Å—ã>;<–û–ø–∏—Å–∞–Ω–∏–µ>;<–ì–æ—Ä–æ–¥>;<–í–æ–∑—Ä–∞—Å—Ç>\`\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.\n\n*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (2 —à–∞–≥–∞):*\n1. \`/editphoto <ID –ª–æ—Ç–∞>\`\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.\n\n*–ü—Ä–æ—Å–º–æ—Ç—Ä:*\n\`/listlots\`\n\n*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π:*\n\`/editlot <ID> <–ø–æ–ª–µ> <–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ>\`\n\n*–£–¥–∞–ª–µ–Ω–∏–µ:*\n\`/deletelot <ID>\``;
  bot.sendMessage(msg.chat.id, helpText, { parse_mode: 'Markdown' });
});

bot.onText(/\/addlot (.+)/s, async (msg, match) => {
  if (!checkAdmin(msg)) return;
  const chatId = msg.chat.id;
  try {
    const parts = match[1].split(';').map(p => p.trim());
    if (parts.length !== 6) throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 6 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.");
    const [title, start_price_str, duration_hours_str, description, city, age_str] = parts;
    const lotData = { title, description, city, start_price: parseInt(start_price_str), duration_hours: parseInt(duration_hours_str), age: parseInt(age_str) };
    if (isNaN(lotData.start_price) || isNaN(lotData.duration_hours) || isNaN(lotData.age)) throw new Error("–¶–µ–Ω–∞, —á–∞—Å—ã, –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.");
    waitingForPhoto[chatId] = { type: 'add', lotData };
    await bot.sendMessage(chatId, `‚è≥ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ª–æ—Ç–∞ "${title}".`);
  } catch (error) {
    await bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞:*\n${error.message}`, { parse_mode: 'Markdown' });
  }
});

bot.onText(/\/editphoto (\d+)/, async (msg, match) => {
  if (!checkAdmin(msg)) return;
  const chatId = msg.chat.id;
  try {
    const lotId = parseInt(match[1], 10);
    if (isNaN(lotId)) throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–æ—Ç–∞.");
    waitingForPhoto[chatId] = { type: 'edit', lotId };
    await bot.sendMessage(chatId, `‚è≥ –ì–æ—Ç–æ–≤ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ª–æ—Ç–∞ *${lotId}*. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.`, { parse_mode: 'Markdown' });
  } catch (error) {
     await bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞:*\n${error.message}`, { parse_mode: 'Markdown' });
  }
});

bot.on('photo', async (msg) => {
  if (!checkAdmin(msg)) return;
  const chatId = msg.chat.id;
  const state = waitingForPhoto[chatId];
  if (!state) return;
  delete waitingForPhoto[chatId];
  try {
    await bot.sendMessage(chatId, `‚è≥ –ü–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...`);
    const photo = msg.photo[msg.photo.length - 1];
    if (state.type === 'add') {
      const { lotData } = state;
      const result = await apiCall('/lots', 'POST', lotData);
      const lotId = result.lotId;
      const photoPath = path.join(UPLOAD_DIR, `${lotId}.jpg`);
      await downloadPhoto(photo.file_id, photoPath);
      const photoUrl = `/uploads/lots/${lotId}.jpg`;
      await apiCall(`/lots/${lotId}`, 'PATCH', { photoUrl });
      await bot.sendMessage(chatId, `‚úÖ –£—Å–ø–µ—à–Ω–æ! –õ–æ—Ç *${lotId}* ("${lotData.title}") —Å–æ–∑–¥–∞–Ω —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.`, { parse_mode: 'Markdown' });
    } else if (state.type === 'edit') {
      const { lotId } = state;
      const photoPath = path.join(UPLOAD_DIR, `${lotId}.jpg`);
      await downloadPhoto(photo.file_id, photoPath);
      const photoUrl = `/uploads/lots/${lotId}.jpg?v=${Date.now()}`;
      await apiCall(`/lots/${lotId}`, 'PATCH', { photoUrl });
      await bot.sendMessage(chatId, `‚úÖ –£—Å–ø–µ—à–Ω–æ! –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –ª–æ—Ç–∞ *${lotId}* –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`, { parse_mode: 'Markdown' });
    }
    await execa('pm2', ['reload', 'tap-app']);
  } catch (error) {
    await bot.sendMessage(chatId, `‚ùå *–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:*\n${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`, { parse_mode: 'Markdown' });
  }
});

bot.onText(/\/listlots/, async (msg) => {
  if (!checkAdmin(msg)) return;
  const chatId = msg.chat.id;
  try {
    await bot.sendMessage(chatId, '‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤...');
    const lots = await apiCall('/lots', 'GET');
    if (lots.length === 0) {
      await bot.sendMessage(chatId, "–õ–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.");
      return;
    }
    const MAX_LENGTH = 4000;
    let reply = "üóÇ *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤:*\n\n";
    for (const lot of lots) {
      const lotString = `*ID: ${lot.id}* (${lot.status}) - _${lot.title}_\n`;
      if (reply.length + lotString.length > MAX_LENGTH) {
        await bot.sendMessage(chatId, reply, { parse_mode: 'Markdown' });
        reply = "";
      }
      reply += lotString;
    }
    if (reply.length > 0) {
      await bot.sendMessage(chatId, reply, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    await bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞:*\n${error.message}`, { parse_mode: 'Markdown' });
  }
});

bot.onText(/\/editlot (\d+) (\w+) (.+)/s, async (msg, match) => {
  if (!checkAdmin(msg)) return;
  const chatId = msg.chat.id;
  try {
    const [, lotId, field, value_encoded] = match;
    let value = decodeURIComponent(value_encoded.trim());
    const allowedFields = ['title', 'description', 'city', 'age', 'start_price', 'status'];
    if (!allowedFields.includes(field)) {
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ. –î–ª—è —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /editphoto.`);
    }
    if (['age', 'start_price'].includes(field)) {
      value = parseInt(value, 10);
      if(isNaN(value)) throw new Error("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
    }
    await bot.sendMessage(chatId, `‚è≥ –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –ø–æ–ª–µ \`${field}\` –¥–ª—è –ª–æ—Ç–∞ *${lotId}*...`, { parse_mode: 'Markdown' });
    await apiCall(`/lots/${lotId}`, 'PATCH', { [field]: value });
    await bot.sendMessage(chatId, `‚úÖ –£—Å–ø–µ—à–Ω–æ! –õ–æ—Ç *${lotId}* –æ–±–Ω–æ–≤–ª–µ–Ω.`, { parse_mode: 'Markdown' });
  } catch (error) {
    await bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:*\n${error.message}`, { parse_mode: 'Markdown' });
  }
});

bot.onText(/\/deletelot (\d+)/, async (msg, match) => {
  if (!checkAdmin(msg)) return;
  const chatId = msg.chat.id;
  try {
    const lotId = match[1];
    await bot.sendMessage(chatId, `‚è≥ –û—Ç–º–µ–Ω—è—é –ª–æ—Ç *${lotId}*...`, { parse_mode: 'Markdown' });
    await apiCall(`/lots/${lotId}`, 'DELETE');
    await bot.sendMessage(chatId, `‚úÖ –£—Å–ø–µ—à–Ω–æ! –õ–æ—Ç *${lotId}* –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.`, { parse_mode: 'Markdown' });
  } catch (error) {
    await bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ:*\n${error.message}`, { parse_mode: 'Markdown' });
  }
});